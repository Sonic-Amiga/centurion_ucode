Addr DP             ALUCIn    ALUOp                                    F                                                BusControl     BusExtra    WriteCtl            R16_LSB SeqOp
  0: swap           0         r5=r5^r5  Y=r5^r5                        PTIdx<=F                                                                    /AddrCount_EN<=1            jump b7
  1: unused
  2: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
  3: const:7f       0         r2=~(D^0)  Y=~(D^0)                                                                       MemAddr_Cnt    BusCycleEnd                             jump 680
  4: swap           0         Y=r0+Q                                                                                                                                           if RegIdx & 1 jsr 482
  5: R[RIdx.L][CPL] 0         r12=D|0  Y=D|0                                                                            BeginRead                                      LSB     jump 63
  6: const:fb       0         Q=~(D^0) Y=~(D^0)                                                                                                                                
  7: const:7        0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 
  8: mar_lo         0         Y=D|0                                    RES<=F                                                                      Addr_U/D<=1                 if DMARequest jsr 785
  9: mar_hi         0         r0=D|0  Y=D|0                            WorkAddr<=RES                                                               R[RIdx]<=RES        LSB     jump 197
  a: swap           0         Y=r0+Q                                   CCR<={V=RES.D7,M=RES.D6,F=RES.D5,L=RES.D4}       BeginRead                                              jump 2
  b: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
  c: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              if DMARequest jsr 785
  d: bus_read       0         r0=D|0  Y=D|0                            RES<=F                                           WorkAddr_Cnt               DataWTClock                 if MemFault jsr 75e
  e: swap           0         Y=r8^r0                                                                                   BeginWrite     AFL.EN                                  jump 4f8
  f: unused
 10: swap           0         r4=r4-0  Y=r9                            RIdx<=F                                                         AFL.EN                                  if REG_MMIO jsr 643
 11: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
 12: bus_read       0         Y=D|0                                    RES<=F                                                                                                  if MemFault jsr 74e
 13: bus_read       0         Q=D|Q Y=D|Q                                                                                                          R[RIdx]<=RES                switch flags(ZM) jump (1e, 1f, 1e, 1f)
 14: swap           0         Y=0|r12                                  RES<=F                                                                                                  if RegIdx & 1 jsr 482
 15: swap           0         Y=0|r13                                  RES<=F                                           BeginRead                  R[RIdx.L][CPL]<=RES         jump 3ef
 16: R[RIdx]        0         Q=D|0 Y=D|0                                                                                                                                      if REG_MMIO jsr 643
 17: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             if DMARequest jsr 785
 18: bus_read       0         r1=D|0  Y=D|0                                                                                                                                    if MemFault jsr 73e
 19: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=0                 jump 96
 1a: swap           0         r3=0&r0  Y=0&r0                                                                                                                                  jump 68f
 1b: unused
 1c: R[RIdx]        0         r0=D|0  Y=D|0                                                                                                                                    jsr 2|(AR & f0)
 1d: swap           0         Y=0|r0                                   RES<=F                                                          AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 30e
 1e: swap           0         r9=r9-0  Y=r9-0                                                                           BeginRead                                              jump 10
 1f: swap           0         Y=0|Q                                                                                                    AFL.EN                                  ret
 20: swap           0         r7=r7-0  Y=r7-0                                                                                          AFL.EN                                  switch flags(ZM) jump (21, 21, 23, 23)
 21: swap           0         Y=r0+Q                                                                                                                                           jump 468
 22: swap           AFL.C     r4=r0+r4  Y=r0+r4                                                                                                    R[RIdx.L][CPL]<=RES LSB     jump 553
 23: swap           0         r4=0|r3  Y=0|r3                                                                                                                                  switch flags(ZM) jump (2d, 2d, 2f, 2f)
 24: swap           0         Y=r0+Q                                                                                                               DMAEnd                      if RegIdx & 1 jsr 482
 25: R[RIdx.L][CPL] 0         r10=D|0  Y=D|0                                                                            BeginRead                                      LSB     jump 289
 26: const:7f       0         r9=~(D^0)  Y=~(D^0)                                                                                                                              
 27: swap           0         r1=~(0^r5)  Y=~(0^r5)                                                                                                                            jsr 62c
 28: swap           AFL.C     Q=0+Q Y=0+Q                                                                                                                                      jump 5aa
 29: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 79d; pop
 2a: swap           1         r3=0+r3  Y=0+r3                          CCR<={V=CCR.V,M=CCR.M,F=1,L=CCR.L}               BeginRead                                              jump b
 2b: const:d1       0         Y=~(D^0)                                 RIdx<=F                                                                                                 jump 2e; pop
 2c: swap           AFL.C     r0=r0-0  Y=r0-0                                                                           BeginWrite                                             jsr 76c
 2d: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 4ae
 2e: swap           0         Y=r0+Q                                                                                                                                   LSB     jump 4bd
 2f: const:7f       0         r9=r3-D  Y=r3-D                          RIdx<=F                                                                                                 jsr 580
 30: CCR            0         Q=~(D^0) Y=~(D^0)                                                                                                                                jump 46a
 31: bus_read       0         r3=D|0  Y=D|0                                                                             BeginRead                                              if MemFault jsr 1be
 32: swap           0         r7=r3+r7  Y=r3+r7                                                                                                                                if REG_MMIO jsr 643
 33: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump bd
 34: swap           0         Y=0|r10                                  RES<=F                                                                                                  if RegIdx & 1 jsr 482
 35: swap           0         Y=0|r11                                  RES<=F                                           BeginRead                  R[RIdx.L][CPL]<=RES         jump 3ef
 36: swap           0         Y=r0+Q                                                                                                                                           jump 62c
 37: swap           1         Y=0-r5                                                                                                   AFL.EN                                  jump STK0
 38: swap           0         r4=r4-0  Y=r4-0                                                                                          AFL.EN                                  if DMARequest jsr 785
 39: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (36, 37, 36, 37)
 3a: const:fd       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 
 3b: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                                                   LSB     jump 4e0
 3c: swap           0         Y=r0+Q                                                                                                                                           if RegOrPageOut jsr 5cc
 3d: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
 3e: const:7f       0         r5=~(D^0)  Y=r5                          RES<=F                                                                      DataWTClock                 
 3f: swap           0         r3=r3-0  Y=r5                            AR<=F                                            BeginWrite                                             jump 8e
 40: swap           0         r4=r4-0  Y=r4-0                                                                                          AFL.EN                                  switch flags(ZM) jump (41, 41, 43, 43)
 41: swap           0         Y=r0+Q                                                                                                                                           if DMARequest jsr 785
 42: swap           0         r0=(0|r0)>>1 Q>>=1 Y=0|r0 RAM7=ALU.S     CCR<={V=CCR.V,M=CCR.M,F=CCR.F,L=ALU.SHIFT_Q0}                                                           jump 40
 43: swap           0         r1=0|Q  Y=0|Q                            RES<=F                                                          AFL.EN                                  ret
 44: const:1        0         Y=D&r9                                                                                                   AFL.EN                                  
 45: const:2        0         r0=D|0  Y=D|0                                                                                                                                    
 46: swap           0         Y=r0&r9                                                                                                  AFL.EN                                  switch flags(ZM) jump (1c9, 1c9, 1cb, 1cb)
 47: bus_read       0         r0=D|0  Y=D|0                                                                                                        R[RIdx.L][CPL]<=RES         if MemFault jsr 466
 48: ILR?           0         r3=D|0  Y=D|0                                                                                                                                    if DMARequest jsr 785
 49: swap           0         Q=0|r6 Y=0|r6                                                                                                                                    jump 671
 4a: swap           1         r3=0+r3  Y=0+r3                                                                           BeginRead                                              jump 167
 4b: swap           0         Y=r0+Q                                                                                    BeginWrite                                             
 4c: swap           0         Y=0|r1                                                                                                   AFL.EN      Addr_U/D<=0                 if RegOrPageOut jsr 5cc
 4d: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             ret
 4e: R[RIdx]        AFL.C     r4=D+r4  Y=D+r4                                                                                                                                  if DMARequest jsr 785
 4f: swap           0         r8=r8-0  Y=r8-0                                                                                          AFL.EN                                  jump 5e
 50: bus_read       0         r7=D+r7  Y=D+r7                                                                                                                                  if MemFault jsr 74e
 51: bus_read       0         r5=D+r1  Y=D+r1                          RES<=F                                                          AFL.EN                                  jump 22
 52: swap           0         r1=r1+r1  Y=r1+r1                                                                                        AFL.EN                                  jump 55
 53: swap           0         Y=0|r1                                   RES<=F                                                          AFL.EN                                  ret
 54: swap           0         Y=r0+Q                                                                                                                                   LSB     jump 77c
 55: swap           AFL.C     r0=r0+r0  Y=r0+r0                                                                                        AFL.EN                                  if DMARequest jsr 785
 56: swap           0         Y=r0+Q                                                                                                                                           push 57; switch flags(VH) jump (1d9, 1d9, 1db, 1db)
 57: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (52, 53, 52, 53)
 58: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=0                 jump 64d
 59: swap           0         r14=(0|r14)>>1  Y=0|r14 RAM7=ALU.S                                                                                                               jump 69
 5a: swap           1         r3=0+r3  Y=0+r3                                                                           BeginRead                                              jump 529
 5b: swap           0         Y=r0+Q                                                                                                                                           jump 16
 5c: R[RIdx]        AFL.C     r4=r4-D  Y=r4-D                                                                                                                                  if DMARequest jsr 785
 5d: swap           1         r8=0+r8  Y=0+r8                                                                                          AFL.EN                                  
 5e: swap           0         Y=r0+Q                                                                                                                                   LSB     switch flags(ZM) jump (5c0, 5c1, 5c2, 5c3)
 5f: swap           0         r14=(0|r14)>>1  Y=0|r14 RAM7=ALU.S                                                                                                               ret
 60: swap           0         r4=r4-0  Y=r4-0                                                                                          AFL.EN                                  if DMARequest jsr 785
 61: swap           0         Y=r0+Q                                                                                                                                           switch flags(IL) jump (65, 65, 6d, 6d)
 62: swap           0         Y=r0+Q                                                                                                                                           switch flags(IL) jump (65, 65, 6d, 6d)
 63: R[RIdx]        0         r13=D|0  Y=D|0                                                                                                                                   jump 101
 64: swap           0         Y=r0+Q                                                                                    BeginRead                  DMAEnable<=1                jump 101
 65: swap           0         Y=r1-r1                                                                                                  AFL.EN                                  switch flags(ZM) jump (66, 67, 66, 67)
 66: swap           1         r0=(0|r0)>>1 Q>>=1 Y=0|r0 RAM7=AFL.C     CCR<={V=CCR.V,M=CCR.M,F=CCR.F,L=ALU.SHIFT_Q0}                                                           jump 60
 67: swap           0         r1=0|Q  Y=0|Q                            RES<=F                                                          AFL.EN                                  ret
 68: swap           0         r7=0|r3  Y=0|r3                          WorkAddr<=RES                                                                                           jump 400
 69: swap           0         r14=(0|r14)>>1  Y=0|r14 RAM7=ALU.S                                                                                                               jump 5f
 6a: swap           1         r3=0+r3  Y=0+r3                                                                           BeginRead                                              jump 529
 6b: swap           0         Y=0|r9                                   RIdx<=F                                                                                                 jump 1f2
 6c: mar_hi         0         Y=D^r0                                   RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     jump 7c
 6d: swap           1         Y=r1-r1                                                                                                  AFL.EN                                  switch flags(ZM) jump (66, 67, 66, 67)
 6e: swap           AFL.C     r1=r1+r1  Y=r1+r1                                                                                        AFL.EN                                  
 6f: swap           AFL.C     r0=r0+r0  Y=r0+r0                                                                                        AFL.EN                                  if DMARequest jsr 785
 70: swap           0         Y=r0+Q                                                                                                                                           push 71; switch flags(VH) jump (1d9, 1d9, 1db, 1db)
 71: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (72, 73, 72, 73)
 72: swap           0         Y=r0+Q                                                                                                                                           switch flags(IL) jump (75, 75, 7d, 7d)
 73: swap           0         Y=0|r1                                   RES<=F                                                          AFL.EN                                  ret
 74: swap           0         Y=r0+Q                                                                                    BeginRead                  DMAEnable<=0                jump 101
 75: swap           0         Y=r1-r1                                                                                                  AFL.EN                                  jump 6e
 76: swap           AFL.C     r1=r1-r1  Y=r1-r1                                                                                                    R[RIdx]<=RES                if DMARequest jsr 785
 77: swap           0         r4=r4-0  Y=r4-0                                                                                          AFL.EN                                  jump 5d6
 78: swap           0         r7=0|r3  Y=0|r3                          WorkAddr<=RES                                                                                           jump 400
 79: mar_hi         0         r14=D|0  Y=D|0                                                                                                                                   jump 1cc
 7a: swap           1         r3=0+r3  Y=0+r3                                                                           BeginRead                                              jump 529
 7b: swap           AFL.C     r4=r4-r2  Y=r4-r2                                                                                        AFL.EN                                  jump 1c7
 7c: swap           0         Y=r0+Q                                                                                                               R[RIdx.L][CPL]<=RES         jump 5e4
 7d: swap           1         Y=r1-r1                                                                                                  AFL.EN                                  jump 6e
 7e: const:8        0         r5=D+r5  Y=r5                            RES<=F                                                                                                  
 7f: swap           1         r11=0+r11  Y=r11                         RES<=F                                           WorkAddr_LD_HI                                         
 80: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                                                           jump 9d
 81: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
 82: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
 83: bus_read       0         r3=D|0  Y=D|0                                                                                                                                    jump 7d8
 84: const:f8       0         r0=~(D^0)  Y=~(D^0)                                                                                                                      LSB     
 85: R[RIdx]        0         r1=D&r0  Y=D&r0                                                                                                                                  jump 2e0
 86: const:f        0         r0=~(D^0)  Y=~(D^0)                                                                                                                              
 87: const:f7       0         Y=~(D^0)                                 RIdx<=F                                                                                                 
 88: mar_lo         0         Y=D|0                                    RES<=F                                                                                                  jump 6c
 89: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 5b4
 8a: swap           1         r3=0+r3  Y=0+r3                                                                           BeginRead                                              jump 4f3
 8b: const:f1       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                          BeginRead                                              
 8c: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
 8d: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump a4
 8e: swap           0         r3=r3-0  Y=r3-0                                                                                          AFL.EN                                  if RegOrPageOut jsr 5cc
 8f: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                   BusCycleEnd                             switch flags(ZM) jump (9, 9, b, b)|(AR & f0)
 90: R[RIdx]        0         r1=D|0  Y=D|0                                                                                                                                    if DMARequest jsr 785
 91: swap           0         Y=r0+Q                                                                                                                                           jsr f1
 92: swap           0         Y=0|Q                                    RES<=F                                                                                                  if DMARequest jsr 785
 93: swap           0         r5=r5-0  Y=r5-0                                                                                          AFL.EN      R[RIdx]<=RES                jump 5fd
 94: swap           0         Y=(~D)&r6                                RES<=F                                           BeginRead                                              
 95: swap           0         Y=r0+Q                                                                                                               R[RIdx.L][CPL]<=RES LSB     jump 101
 96: swap           0         r9=0|r7  Y=0|r7                          RIdx<=F                                          MemAddr_Cnt                                            jsr f1
 97: R[RIdx]        0         Y=D+Q                                    RES<=F                                                          AFL.EN                                  if DMARequest jsr 785
 98: swap           AFL.C     r4=0+r4  Y=0+r4                          RES<=F                                                                      R[RIdx]<=RES                jump 4b9
 99: swap           0         Y=r0+Q                                                                                    BeginRead                  Addr_U/D<=1                 jump 7eb
 9a: swap           1         r3=0+r8  Y=0+r8                                                                           BeginRead                                              jump 43c
 9b: swap           0         Y=r5|r7                                                                                                  AFL.EN                                  jump 46a
 9c: mar_lo         0         Y=D|0                                    RIdx<=F                                                         BUS_DELAY                               switch pagetable??? jump (9e, 9f, 9e, 9f)
 9d: swap           0         r7=r7-0  Y=r7-0                                                                                          AFL.EN      PTRAM<=RES                  ret
 9e: swap           0         Y=0|r3                                   CPL<=F                                                          BusCycleEnd                             jump 630
 9f: swap           0         Y=0|r9                                   RIdx<=F                                                                     R[RIdx]<=RES                jump 6fd
 a0: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                               R[RIdx.L][CPL]<=RES         jump 87
 a1: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=1,L=CCR.L}                                                              LSB     
 a2: R[RIdx.L][CPL] 0         Y=D|0                                    RES<=F                                                                                                  jump 4b4
 a3: swap           0         Y=r0+Q                                                                                                                                           jump 86
 a4: bus_read       0         r7=D+r7  Y=D+r7                                                                                          AFL.EN                                  if MemFault jsr 74e
 a5: swap           0         Y=0&r0                                                                                                   AFL.EN                          LSB     switch flags(ZM) jump (a1, a1, a3, a3)
 a6: bus_read       0         Y=D|0                                    RES<=F                                           BeginRead                                              if MemFault jsr 7ae
 a7: swap           0         Y=r0+Q                                                                                                               R[RIdx.L][CPL]<=RES         if REG_MMIO jsr 643
 a8: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
 a9: bus_read       0         Y=D|0                                    RES<=F                                           BeginRead                                              if MemFault jsr 1be
 aa: swap           1         r9=0+r9  Y=0+r9                                                                                                      R[RIdx.L][CPL]<=RES LSB     if REG_MMIO jsr 643
 ab: const:f        0         r4=~(D^0)  Y=~(D^0)                                                                       MemAddr_Cnt    BusCycleEnd                             
 ac: bus_read       0         r2=D|0  Y=D|0                                                                             BeginRead                                              if MemFault jsr 1be
 ad: swap           0         r9=r9+r9  Y=r9+r9                        RIdx<=F                                                                                                 if REG_MMIO jsr 643
 ae: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             if DMARequest jsr 785
 af: swap           0         Y=r0+r8                                  RES<=F                                                          AFL.EN                                  if MemFault jsr 73e
 b0: swap           AFL.C     Y=0+r1                                   RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     jump 2bb
 b1: swap           0         Y=r0+Q                                                                                                               DMAEnd                      jsr 7e
 b2: swap           0         r6=r6^r6  Y=r6^r6                                                                                                                                switch flags(ZM) jump (b1, b1, b3, b3)
 b3: const:81       0         r11=~(D^0)  Y=~(D^0)                                                                                                                             jsr 7e
 b4: ILR?           0         r0=D^0  Y=D^0                                                                                                                                    jsr 7e
 b5: const:2        0         Y=D&r0                                                                                    Swap           AFL.EN      RTC_INT_EN<=1               
 b6: swap           0         Y=r0^r0                                  RES<=F                                           Swap                                                   switch flags(ZM) jump (b9, b9, bb, bb)
 b7: const:e1       0         r7=~(D^0)  Y=r5                          RES<=F                                                                      Addr_U/D<=1                 
 b8: swap           0         r11=r11^r11  Y=r11^r11                   CPL<=F                                                                      /RTC_INT_Reset<=1           jump 1ec
 b9: swap           0         Y=~(D^0)                                 RES<=F                                                                      WorkAddr_LD_LO              
 ba: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI             RUN<=1                      jump bc
 bb: const:e1       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 jump 71e
 bc: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                               ABT_LED<=0                  jump 100
 bd: bus_read       0         r4=D|0  Y=D|0                                                                             BeginRead                                              if MemFault jsr 1be
 be: swap           0         r7=r4+r7  Y=r4+r7                                                                                                                                if REG_MMIO jsr 643
 bf: swap           0         r9=0&r0  Y=0&r0                          RIdx<=F                                          MemAddr_Cnt    BusCycleEnd                             jump 50
 c0: unused
 c1: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (ce, cf, ce, cf)
 c2: unused
 c3: swap           0         Y=0|r1                                   RES<=F                                                                                                  switch flags(ZM) jump (1c2, 1c3, 1c2, 1c3)
 c4: swap           0         Y=r0+Q                                                                                                                                   LSB     if REG_MMIO jsr 633
 c5: R[RIdx.L][CPL] 0         r3=D|0  Y=D|0                                                                             MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
 c6: R[RIdx]        0         r2=D|0  Y=D|0                                                                             BeginRead                                              if MemFault jsr 636
 c7: bus_read       0         r0=D|0  Y=D|0                            RES<=F                                                                                                  if REG_MMIO jsr 633
 c8: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             switch flags(ZM) jump (c9, c9, cb, cb)
 c9: bus_read       0         Y=D+r3                                   RES<=F                                           WorkAddr_LD_HI AFL.EN                                  if MemFault jsr 466
 ca: swap           AFL.C     Y=r0+r2                                  RES<=F                                                                      WorkAddr_LD_LO              jump fd
 cb: bus_read       0         Y=D|0                                    RES<=F                                           WorkAddr_LD_HI                                         if MemFault jsr 466
 cc: swap           0         Y=r0+Q                                                                                                               WorkAddr_LD_LO              jump e7
 cd: swap           0         Y=r0+Q                                                                                    BeginWrite                                             jump 3c
 ce: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 549
 cf: const:d1       0         Y=~(D^0)                                 RIdx<=F                                                                                                 jump 2e
 d0: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
 d1: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 31
 d2: swap           AFL.C     r0=r0+r0  Y=r0+r0                                                                                        AFL.EN                                  
 d3: swap           1         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=AFL.C                                                                                                               jsr 259
 d4: swap           1         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=AFL.C                                                                                                               jsr 259
 d5: swap           1         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=AFL.C                                                                                                               jsr 259
 d6: swap           1         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=AFL.C                                                                                                               jsr 259
 d7: swap           1         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=AFL.C                                                                                                               jsr 259
 d8: swap           1         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=AFL.C                                                                                                               jsr 259
 d9: swap           1         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=AFL.C                                                                                                               jsr 259
 da: swap           1         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=AFL.C                                                                                                               jsr 259
 db: swap           1         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=AFL.C                                                                                                               jsr 259
 dc: swap           1         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=AFL.C                                                                                                               jsr 259
 dd: swap           1         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=AFL.C                                                                                                               jsr 259
 de: swap           1         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=AFL.C                                                                                                               jsr 259
 df: swap           1         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=AFL.C                                                                                                               jsr 259
 e0: swap           1         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=AFL.C                                                                                                               jsr 259
 e1: swap           1         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=AFL.C                                                                                                               jsr 259
 e2: swap           1         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=AFL.C                                                                                                               jsr 259
 e3: swap           0         r8=D&r8  Y=D&r8                          RIdx<=F                                                                                                 jump ee
 e4: swap           0         Y=0|r1                                   RES<=F                                                          AFL.EN                                  
 e5: swap           0         Y=0|r0                                   RES<=F                                           BeginRead      AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 30e
 e6: unused
 e7: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              
 e8: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 46e
 e9: const:f2       0         Y=D|r8                                   RIdx<=F                                                                     R[RIdx.L][CPL]<=RES         jsr ed
 ea: swap           0         Y=0|r4                                   RES<=F                                                          AFL.EN      R[RIdx.L][CPL]<=RES LSB     switch flags(ZM) jump (e9, e9, eb, eb)
 eb: const:32       0         Y=D|r8                                   RIdx<=F                                                                     R[RIdx.L][CPL]<=RES         push ec; switch flags(ZM) jump (ed, ed, ef, ef)
 ec: unused
 ed: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=0,L=1}                                                                          jump 4|(STK0 & ff0); pop
 ee: swap           0         Y=0|Q                                    RES<=F                                                          AFL.EN                                  jump ea
 ef: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=0,L=0}                                                                          jump 4|(STK0 & ff0); pop
 f0: swap           0         Q=0|r2 Y=0|r2                                                                                                                                    if DMARequest jsr 785
 f1: swap           0         r14=(0&r0)>>1 Q>>=1 Y=0&r0 RAM7=ALU.S    CCR<={V=CCR.V,M=CCR.M,F=CCR.F,L=ALU.SHIFT_Q0}                                                           
 f2: swap           0         Y=r0+Q                                                                                                                                           push f3; switch flags(IL) jump (f7, f7, ff, ff)
 f3: swap           0         Y=r0+Q                                                                                                                                           push f4; switch flags(IL) jump (f7, f7, ff, ff)
 f4: swap           0         Y=r0+Q                                                                                                                                           push f5; switch flags(IL) jump (f7, f7, ff, ff)
 f5: swap           0         Y=r0+Q                                                                                                                                           push f6; switch flags(IL) jump (f7, f7, ff, ff)
 f6: swap           0         Y=r0+Q                                                                                                                                           jump f8
 f7: swap           0         r4=(0+r4)>>1 Q>>=1 Y=0+r4 RAM7=ALU.C     CCR<={V=CCR.V,M=CCR.M,F=0,L=ALU.SHIFT_Q0}                                                               ret
 f8: swap           0         Y=r0+Q                                                                                                                                           if DMARequest jsr 785
 f9: swap           0         Y=r0+Q                                                                                                                                           push fa; switch flags(IL) jump (f7, f7, ff, ff)
 fa: swap           0         Y=r0+Q                                                                                                                                           push fb; switch flags(IL) jump (f7, f7, ff, ff)
 fb: swap           0         Y=r0+Q                                                                                                                                           push fc; switch flags(IL) jump (f7, f7, ff, ff)
 fc: swap           0         Y=r0+Q                                                                                                                                           switch flags(IL) jump (f7, f7, ff, ff)
 fd: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI                                         jump e7
 fe: swap           0         Q=0|r3 Y=0|r3                                                                                                                                    jump f1
 ff: swap           0         r4=(r1+r4)>>1 Q>>=1 Y=r1+r4 RAM7=ALU.C   CCR<={V=CCR.V,M=CCR.M,F=0,L=ALU.SHIFT_Q0}                                                               ret
100: swap           0         Y=r0+Q                                                                                    BeginRead                                              push 101
Op_01:
101: swap           0         r9=r9^r9  Y=r9^r9                        RIdx<=F                                                         AFL.EN                                  if REG_MMIO jsr 633
102: swap           1         r8=0+r9  Y=r9                            RES<=F                                           MemAddr_Cnt    BusCycleEnd                             if MultiINT jsr 77f
103: bus_read       0         r7=D|0  Y=D|0                            AR<=F                                            MAPROM_SEL                                     LSB     if MemFault jsr 466
104: R[RIdx.L][CPL] 0         r1=D|0  Y=r7                             AR<=F                                            BeginRead                                              jump 100|(AR & ff)
105: const:f        0         r2=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 
106: ILR?           0         Q=D&r2 Y=D&r2                                                                                                                                    jump 2f0
Op_1f:
107: const:ef       0         Y=~(D^0)                                 RIdx<=F                                                                                                 
108: swap           0         r2=0|r8  Y=0|r8                                                                                                                                  jump 792
Op_70:
Op_97:
Op_a7:
Op_b7:
Op_c7:
Op_e7:
109: swap           0         Y=0&r0                                   RES<=F                                                          BusCycleEnd                             jump 105
10a: R[RIdx.L][CPL] 1         Y=D+r4                                   RES<=F                                                          AFL.EN                                  jump 309
10b: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
10c: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
10d: bus_read       0         r7=D+r7  Y=D+r7                          WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              if MemFault jsr 76e
10e: bus_read       0         Y=D|0                                    RES<=F                                                                      DataWTClock                 jump 55c
10f: unused
110: unused
111: unused
112: unused
Op_f7:
113: R[RIdx]        1         Y=0+r8                                   RIdx<=F                                          Swap                                                   jump 7ca
Op_60:
114: const:fb       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 
Op_90:
115: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
116: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 300
117: bus_read       0         r8=D|0  Y=D|0                                                                                                                                    if MemFault jsr 466
118: swap           0         Y=r0+Q                                                                                                                                           jump 70f
Op_02:
119: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=1,L=CCR.L}                                                                      jump STK0
11a: R[RIdx.L][CPL] 0         Y=D-r4                                   RES<=F                                                          AFL.EN                                  jump 30a
Op_80:
11b: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
11c: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 305
Op_28:
11d: swap           1         Y=0+r1                                   RES<=F                                                          AFL.EN                                  jump 307
Op_29:
11e: swap           0         Y=r1-0                                   RES<=F                                                          AFL.EN                                  jump 307
Op_3e:
Op_3f:
11f: const:fb       0         Y=~(D^0)                                 RIdx<=F                                                                                                 
120: swap           0         Y=r0+Q                                                                                                                                   LSB     jump 308
Op_2d:
121: swap           0         Y=r1+r1                                  RES<=F                                                          AFL.EN                                  jump 30c
Op_2a:
122: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=0,L=0}                                              R[RIdx.L][CPL]<=RES LSB     jump STK0
Op_2b:
123: swap           0         Y=~(0^r1)                                RES<=F                                                          AFL.EN                                  jump 306
Op_2c:
124: swap           0         r1=(0|r1)>>1 Q>>=1 Y=0|r1 RAM7=ALU.S                                                                                                             jump 30d
Op_3b:
125: swap           0         Y=~(0^r1)                                RES<=F                                                          AFL.EN                                  jump 13b
Op_e0:
126: swap           1         r9=0+r8  Y=0+r8                          RIdx<=F                                                                                                 jump 30f
127: bus_read       0         r3=D|0  Y=D|0                                                                             BeginRead                                              if MemFault jsr 636
128: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
129: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 117
Op_3a:
12a: swap           0         Y=0&r0                                   RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     jump 521
Op_a0:
12b: swap           0         r2=0|r1  Y=0|r1                                                                                          BusCycleEnd                             jump 315
Op_c0:
12c: swap           1         r9=0+r8  Y=0+r8                          RIdx<=F                                                                                                 if REG_MMIO jsr 633
12d: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 305
Op_38:
12e: swap           1         Y=0+r1                                   RES<=F                                                          AFL.EN                                  jump 309
Op_39:
12f: swap           0         Y=r1-0                                   RES<=F                                                          AFL.EN                                  jump 30a
Op_f0:
130: swap           1         r9=0+r8  Y=0+r8                          RIdx<=F                                                                                                 jump 132
Op_68:
131: const:fb       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 
132: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             jump 31a
Op_88:
Op_98:
Op_a8:
Op_b8:
133: swap           0         r8=0&r1  Y=r1                            RES<=F                                                                                                  jump 31e
Op_c8:
Op_d8:
Op_e8:
Op_f8:
134: swap           1         r8=0+r8  Y=r1                            RES<=F                                                                                                  jump 31e
Op_89:
Op_8a:
Op_8b:
Op_8c:
Op_8d:
Op_8e:
Op_8f:
Op_99:
Op_9a:
Op_9b:
Op_9c:
Op_9d:
Op_9e:
Op_9f:
Op_a9:
Op_aa:
Op_ab:
Op_ac:
Op_ad:
Op_ae:
Op_af:
Op_b9:
Op_ba:
Op_bb:
Op_bc:
Op_bd:
Op_be:
Op_bf:
135: swap           0         Y=r7+r7                                  RIdx<=F                                                                                                 jump 31b
Op_c9:
Op_ca:
Op_cb:
Op_cc:
Op_cd:
Op_ce:
Op_cf:
Op_d9:
Op_da:
Op_db:
Op_dc:
Op_dd:
Op_de:
Op_df:
Op_e9:
Op_ea:
Op_eb:
Op_ec:
Op_ed:
Op_ee:
Op_ef:
Op_f9:
Op_fa:
Op_fb:
Op_fc:
Op_fd:
Op_fe:
Op_ff:
136: swap           0         Y=r7+r7                                  RIdx<=F                                                                                                 jump 31c
137: bus_read       0         r3=D|0  Y=D|0                                                                                                                                    jump 117
138: unused
139: R[RIdx.L][CPL] AFL.C     Y=0-D                                    RES<=F                                           BeginRead      AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 3e5
13a: R[RIdx.L][CPL] 0         Y=r4-D                                   RES<=F                                                          AFL.EN                                  switch flags(ZM) jump (139, 139, 13b, 13b)
13b: R[RIdx.L][CPL] 0         Y=~(D^0)                                 RES<=F                                           BeginRead      AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 30e
Op_b0:
13c: R[RIdx]        0         r0=D|0  Y=D|0                                                                                            BusCycleEnd                             jump 311
Op_87:
13d: swap           0         Y=0&r0                                   RES<=F                                                          BusCycleEnd                             jump 105
Op_d0:
13e: swap           1         r9=0+r8  Y=0+r8                          RIdx<=F                                                                                                 if REG_MMIO jsr 633
13f: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 300
Op_4b:
Op_4c:
Op_4d:
Op_4e:
Op_4f:
Op_5b:
Op_5c:
Op_5d:
Op_5e:
Op_5f:
140: swap           0         Y=0|r1                                   RES<=F                                                          AFL.EN                                  jsr 320|(AR & f)
Op_48:
Op_49:
Op_4a:
141: swap           1         Y=0+r8                                   RIdx<=F                                                                                                 
142: swap           0         Y=r0+Q                                                                                                                                   LSB     jump 320|(AR & f)
Op_58:
Op_59:
Op_5a:
143: swap           1         Y=0+r8                                   RIdx<=F                                                                                                 
144: R[RIdx.L][CPL] 0         r2=D|0  Y=D|0                                                                                                                            LSB     jump 330|(AR & f)
Op_40:
Op_41:
Op_42:
Op_43:
Op_44:
Op_45:
145: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
146: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 33b
147: swap           0         r9=0|r5  Y=0|r5                                                                           MemAddr_Cnt    BusCycleEnd                             if RegIdx & 1 jsr 422
148: bus_read       0         Y=D|0                                    RES<=F                                                                                                  if MemFault jsr 466
149: swap           0         r9=r8&r9  Y=r8&r9                        RIdx<=F                                                                     WorkAddr_LD_LO              jump 2b3
14a: R[RIdx.L][CPL] 0         Q=D|0 Y=D|0                                                                                                                                      jump 1c
Op_46:
14b: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
14c: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 3a0
Op_3c:
14d: R[RIdx]        0         r0=D|0  Y=D|0                                                                                                                                    jump 2ed
Op_3d:
14e: R[RIdx.L][CPL] 0         r2=D|0  Y=D|0                                                                                                                            LSB     jump 71b
Op_03:
14f: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=0,L=CCR.L}                                                                      jump STK0
Op_6e:
150: const:fe       0         r7=~(D^0)  Y=~(D^0)                      AR<=F                                                                                                   
Op_81:
Op_82:
Op_83:
Op_84:
Op_85:
Op_a1:
Op_a2:
Op_a3:
Op_a4:
Op_a5:
151: swap           0         r8=0&r0  Y=0&r0                                                                                                                                  if REG_MMIO jsr 633
152: swap           1         r3=0+r8  Y=0+r8                                                                           MemAddr_Cnt    BusCycleEnd                             jump 330|(AR & f)
Op_6f:
153: const:ee       0         r7=~(D^0)  Y=~(D^0)                      AR<=F                                                                                                   jump 151
Op_71:
Op_72:
Op_73:
Op_74:
Op_75:
Op_91:
Op_92:
Op_93:
Op_94:
Op_95:
Op_b1:
Op_b2:
Op_b3:
Op_b4:
Op_b5:
154: swap           1         r3=0+r8  Y=0+r8                                                                                                                                  if REG_MMIO jsr 633
155: swap           0         r8=0&r0  Y=0&r0                                                                           MemAddr_Cnt    BusCycleEnd                             jump 330|(AR & f)
Op_18:
156: CCR            0         r2 =(D|0)<<1  Y=D|0 Q0=0                                                                                 AFL.EN                                  jump 421
157: bus_read       0         Y=D|0                                    RES<=F                                                                                                  if MemFault jsr 78e
158: swap           0         Y=r0+Q                                   CCR<={V=RES.D7,M=RES.D6,F=RES.D5,L=RES.D4}       BeginRead                                              jump STK0
159: swap           0         Y=r0+Q                                                                                                                                           jump 199; pop
15a: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                            CCR<={V=CCR.V,M=CCR.M,F=0,L=CCR.L}                                                                      jump 1c
15b: swap           0         r7=D|0  Y=D|0                                                                                                                                    if REG_MMIO jsr 633
15c: const:11       0         r8=~(D^0)  Y=~(D^0)                                                                       MemAddr_Cnt    BusCycleEnd                             
15d: bus_read       0         r5=D|0  Y=D|0                            RIdx<=F                                          Swap                                                   if MemFault jsr 466
15e: swap           0         r4=D&r8  Y=D&r8                          RIdx<=F                                                                                                 if RegIdx & 0x11 == 0 jsr 3c1
15f: swap           0         Y=(~r8)&r5                               AR<=F                                            BeginRead                                      LSB     jump 4e9
Op_c1:
Op_c2:
Op_c3:
Op_c4:
Op_c5:
Op_e1:
Op_e2:
Op_e3:
Op_e4:
Op_e5:
160: swap           0         r3=0|r8  Y=0|r8                                                                                                                                  if REG_MMIO jsr 633
161: swap           1         r8=0+r8  Y=0+r8                                                                           MemAddr_Cnt    BusCycleEnd                             jump 330|(AR & f)
Op_d1:
Op_d2:
Op_d3:
Op_d4:
Op_d5:
Op_f1:
Op_f2:
Op_f3:
Op_f4:
Op_f5:
162: swap           1         r3=0+r8  Y=0+r8                                                                                                                                  if REG_MMIO jsr 633
163: swap           0         r8=0|r3  Y=0|r3                                                                           MemAddr_Cnt    BusCycleEnd                             jump 330|(AR & f)
Op_69:
Op_6a:
Op_6b:
Op_6c:
Op_6d:
Op_79:
Op_7a:
Op_7b:
Op_7c:
Op_7d:
164: const:c8       0         r7=(~D)&r7  Y=(~D)&r7                    AR<=F                                                                                                   
Op_61:
Op_62:
Op_63:
Op_64:
Op_65:
165: swap           1         r3=0+r8  Y=0+r8                                                                                                                                  if REG_MMIO jsr 633
166: const:cb       0         r8=~(D^0)  Y=~(D^0)                                                                       MemAddr_Cnt    BusCycleEnd                             jump 330|(AR & f)
167: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
168: swap           0         Y=r0+Q                                                                                                                                           jump 4e6
169: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (9, 9, b, b)|(STK0 & ff0); pop
16a: R[RIdx.L][CPL] 0         Q=D|0 Y=D|0                                                                                                                                      jump 1c
Op_d6:
16b: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
16c: const:11       0         r8=~(D^0)  Y=~(D^0)                                                                       MemAddr_Cnt    BusCycleEnd                             
16d: bus_read       0         r5=D|0  Y=D|0                            RIdx<=F                                          Swap                                                   if MemFault jsr 466
16e: swap           0         r4=D|0  Y=D|0                                                                                                                            LSB     if RegIdx & 1 jsr 492
16f: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                                                                                                                                    if RegIdx & 0x11 == 0 jsr 2f9
170: R[RIdx.L][CPL] 0         r2=D|0  Y=D|0                            RES<=F                                                                      DataWTClock         LSB     jump 312
171: swap           0         Y=D|0                                    AR<=F                                                                                                   if REG_MMIO jsr 633
172: const:f0       0         r5=~(D^0)  Y=~(D^0)                                                                       MemAddr_Cnt    BusCycleEnd                             
173: bus_read       0         r5=D&r5  Y=D&r5                          RES<=F                                           Swap           AFL.EN                                  if MemFault jsr 466
174: swap           0         r9=D|0  Y=D|0                            RIdx<=F                                                                                                 if DMARequest jsr 785
175: swap           0         Y=r0+Q                                                                                                                                           jump 501|(AR & f0)
176: swap           0         Y=r0+Q                                                                                                                                   LSB     jsr 4ed
177: swap           1         r8=0+r8  Y=0+r8                                                                                                                                  jsr 522
178: swap           0         Y=0|r7                                                                                                   AFL.EN                                  jump 23
179: swap           0         r0=0&r0  Y=0&r0                                                                                                                                  switch flags(ZM) jump (9, 9, b, b)|(STK0 & ff0); pop
17a: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                            CCR<={V=CCR.V,M=CCR.M,F=0,L=CCR.L}                                                                      jump 1c
Op_08:
17b: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=CCR.F,L=/CCR.L}                                                                 jump STK0
Op_56:
17c: const:80       0         r6=D|r6  Y=D|r6                                                                                                                                  jump STK0
Op_57:
17d: const:80       0         r6=(~D)&r6  Y=(~D)&r6                                                                                                                            jump STK0
Op_0d:
17e: const:fb       0         Y=~(D^0)                                 RIdx<=F                                                                                                 
17f: mar_lo         0         Y=D|0                                    RES<=F                                                                                                  jump 3cc
180: swap           0         Y=D|0                                    AR<=F                                                                                                   if REG_MMIO jsr 633
181: const:f0       0         r5=~(D^0)  Y=~(D^0)                                                                       MemAddr_Cnt    BusCycleEnd                             
182: bus_read       0         r4=D&r5  Y=D&r5                          RES<=F                                           Swap           AFL.EN                                  if MemFault jsr 466
183: swap           0         r9=D|0  Y=D|0                            RIdx<=F                                                                                                 if DMARequest jsr 785
184: swap           0         r5=r5-0  Y=r5-0                                                                                                                          LSB     if RegIdx & 1 jsr 18a else jump 10a|(AR & f0)
Op_06:
185: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=CCR.F,L=1}                                                                      jump STK0
186: unused
187: unused
188: unused
Op_50:
Op_51:
Op_52:
Op_53:
Op_54:
Op_55:
Op_77:
Op_78:
189: bus_read       0         Y=r0+Q                                                                                    Swap                                                   jump 15b
18a: swap           0         r9=r5&r9  Y=r5&r9                        RIdx<=F                                          BeginRead      AFL.EN                                  jump c4; pop
Op_00:
Op_04:
Op_05:
Op_0a:
Op_0e:
Op_0f:
Op_2e:
Op_2f:
Op_76:
Op_86:
Op_96:
Op_a6:
Op_b6:
Op_c6:
Op_d7:
Op_e6:
Op_f6:
18b: const:bf       0         Y=(~D)&r6                                                                                                AFL.EN                                  
18c: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (18d, 18d, 18f, 18f)
18d: swap           1         Y=0+r9                                   RES<=F                                                          BusCycleEnd                             jump 105
Op_0b:
18e: swap           0         Y=0&r0                                   RES<=F                                                          BusCycleEnd                             jump 105
18f: swap           0         Y=r0+Q                                                                                                                                           jump 500|(AR & ff)
Op_7e:
Op_7f:
190: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
191: const:f0       0         r5=~(D^0)  Y=~(D^0)                                                                       MemAddr_Cnt    BusCycleEnd                             
192: bus_read       0         r4=D&r5  Y=D&r5                                                                           Swap                                                   jump 433
Op_09:
193: const:f5       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 
194: swap           0         Y=r0+Q                                                                                                                                   LSB     jump 23c
195: swap           0         r4=0|r8  Y=0|r8                                                                                                                                  jsr 1df
196: swap           0         Y=r0+Q                                                                                                                                           jsr 109|(AR & f0)
197: const:f        0         Y=~(D^r0)                                RES<=F                                                                                                  
198: swap           0         Y=0|Q                                    RES<=F                                                                      R[RIdx]<=RES                jump 105
199: swap           0         r4=0|r8  Y=0|r8                                                                                                                                  jsr 569
19a: const:80       0         r9=D+r3  Y=D+r3                          WorkAddr<=RES                                                                                           jump 67b
19b: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=1,L=CCR.L}                                                                      
19c: const:11       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 jump 5ee
19d: swap           0         r14=0|Q  Y=0|Q                                                                                                                                   jump 5bc
19e: swap           0         r4=0|r8  Y=0|r8                                                                                                                                  switch flags(ZM) jump (19d, 19d, 19f, 19f)
19f: swap           0         Y=0|Q                                    RES<=F                                                                      DataWTClock                 jump 5a0
Op_47:
1a0: const:f        0         r0=~(D^0)  Y=~(D^0)                                                                                                                              
1a1: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
1a2: const:3f       0         Q=~(D^0) Y=~(D^0)                                                                         MemAddr_Cnt    BusCycleEnd                             
1a3: bus_read       0         Y=D&Q                                    AR<=F                                                                                                   if DMARequest jsr 785
1a4: bus_read       0         r4=D|0  Y=D|0                                                                                                                                    if MemFault jsr 466
1a5: swap           0         Y=r4&r0                                  AR<=F                                                           AFL.EN                                  jump 70b|(AR & f0)
1a6: swap           0         Y=0|r0                                   RES<=F                                                                      DataWTClock                 jump 4b
1a7: swap           0         Y=r0+Q                                                                                                                                           ret
1a8: swap           0         r3=r3-0  Y=r3-0                                                                                          AFL.EN                                  if RegOrPageOut jsr 5cc
1a9: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             switch flags(ZM) jump (1aa, 1ab, 1aa, 1ab)
1aa: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt                                            jump 5b8
1ab: swap           0         Y=0|r5                                                                                                   AFL.EN                                  jump 600|(AR & f0)
1ac: swap           0         r11=0|r15  Y=0|r15                       WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 1ae
1ad: swap           0         r5=~(r5^r5)  Y=~(r5^r5)                                                                                                                          switch flags(ZM) jump (1a6, 1a7, 1a6, 1a7)
1ae: const:f        0         r10=~(D^r14)  Y=~(D^r14)                                                                                                                         ret
Op_07:
1af: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=CCR.F,L=0}                                                                      jump STK0
Op_67:
1b0: swap           0         r9=r9^r9  Y=r9^r9                        RIdx<=F                                                                                                 if REG_MMIO jsr 633
1b1: const:3f       0         r0=~(D^0)  Y=~(D^0)                                                                       MemAddr_Cnt    BusCycleEnd                             
1b2: bus_read       0         Y=D&r0                                   AR<=F                                                                                                   if MemFault jsr 466
1b3: bus_read       0         r4=D|0  Y=D|0                                                                                                                                    if DMARequest jsr 785
1b4: const:f        0         r0=~(D^0)  Y=~(D^0)                                                                                                                              
1b5: R[RIdx.L][CPL] 0         r8=D|0  Y=r4                             AR<=F                                                                                           LSB     jump 709|(AR & f0)
1b6: unused
Op_66:
1b7: swap           1         r8=r8+r8  Y=r8+r8                                                                                                                                if REG_MMIO jsr 633
1b8: const:f0       0         r2=D|0  Y=D|0                                                                             MemAddr_Cnt    BusCycleEnd                             
1b9: swap           1         Y=0+r8                                   RIdx<=F                                                                                                 jump 687
Op_1e:
1ba: swap           0         r0=~(r0^r0)  Y=~(r0^r0)                                                                                                                          switch flags(IL) jump (1bb, 1bf, 1bb, 1bf)
1bb: swap           0         r2=r2^r2  Y=r2^r2                                                                                                                                jump 430
1bc: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
1bd: swap           0         r3=0&r0  Y=0&r0                                                                           MemAddr_Cnt    BusCycleEnd                             jump 1c0
1be: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             jump 74e
1bf: swap           0         r2=~(r2^r2)  Y=~(r2^r2)                                                                                                                          jump 430
1c0: bus_read       0         r2=D|0  Y=D|0                            RIdx<=F                                                                                                 if MemFault jsr 466
1c1: swap           1         Y=0+r2                                   RIdx<=F                                                                                                 jump 1e4
1c2: const:8        0         r1=D+r1  Y=r1                            PTIdx<=F                                         WorkAddr_LD_HI                                         jump 1f7
1c3: const:d1       0         Y=~(D^0)                                 RIdx<=F                                                                                                 jump 2e
1c4: swap           0         Y=r0+Q                                                                                                                                           jsr 68e
1c5: const:fd       0         Q=~(D^0) Y=~(D^0)                                                                                                                                
1c6: swap           0         Y=r0+Q                                                                                                                                           jump 7
1c7: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=CCR.F,L=AFL.C}                                                                  
1c8: swap           0         Y=r0+Q                                                                                                                                           switch flags(IL) jump (7, 7, f, f)|(STK0 & ff0); pop
1c9: swap           0         Y=r0+Q                                                                                    BeginRead                  SysCtl0_DMA<=1              switch flags(ZM) jump (1cd, 1cd, 1cf, 1cf)
Op_0c:
1ca: swap           0         Y=r0+Q                                                                                                               ABT_LED<=1                  jump 63e
1cb: swap           0         Y=r0+Q                                                                                    BeginRead                  SysCtl0_DMA<=0              switch flags(ZM) jump (1cd, 1cd, 1cf, 1cf)
1cc: const:f        0         r14=~(D^r14)  Y=~(D^r14)                                                                                                                         ret
1cd: swap           0         Y=r0+Q                                                                                                               SysCtl1_DMA<=1              jump 101
Op_1d:
1ce: const:8        0         r0=D|0  Y=r8                             RIdx<=F                                                                                                 jump 1ff
1cf: swap           0         Y=r0+Q                                                                                                               SysCtl1_DMA<=0              jump 101
1d0: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 441
1d1: const:f        0         r0=~(D^0)  Y=~(D^0)                                                                                                                              
1d2: const:f9       0         Y=~(D^0)                                 RIdx<=F                                                                                                 
1d3: mar_hi         0         Y=D^r0                                   RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     jump a0
1d4: const:f1       0         r0=~(D^0)  Y=~(D^0)                                                                       BeginRead                                              jump 705
1d5: R[RIdx]        0         Y=D|0                                    RES<=F                                                                                                  jump 1d7
1d6: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=0                 jump 668
1d7: swap           0         Y=0|r0                                   RES<=F                                           BeginRead                  R[RIdx.L][CPL]<=RES LSB     jump 1da
1d8: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 4d0
1d9: swap           0         r4=r4-0  Y=r4-0                          CCR<={V=CCR.V,M=CCR.M,F=CCR.F,L=AFL.C}                          AFL.EN                                  ret
1da: swap           0         Y=r0+Q                                                                                                               R[RIdx.L][CPL]<=RES         jump 101
1db: swap           0         r4=r4-0  Y=r4-0                          CCR<={V=CCR.V,M=CCR.M,F=1,L=AFL.C}                              AFL.EN                                  ret
1dc: mar_lo         0         r2=D|0  Y=D|0                                                                                                                                    if DMARequest jsr 785
1dd: mar_hi         0         r1=~(D^r0)  Y=~(D^r0)                                                                                                                            jump 452
Op_1c:
1de: const:4        0         r0=D|0  Y=r8                             RIdx<=F                                                                                                 jump 1ff
1df: swap           0         Q=0&r0 Y=0&r0                                                                             BeginRead                                              jump 10
1e0: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (1e1, 1e1, 1e3, 1e3)
1e1: swap           0         r3=r3-0  Y=r3-0                                                                                          AFL.EN                                  if DMARequest jsr 785
1e2: swap           AFL.C     r4=r4-0  Y=r4-0                                                                                          AFL.EN                                  jump 1e0
1e3: swap           0         Y=r0+Q                                                                                                                                           ret
1e4: R[RIdx]        0         r0=D|0  Y=r3                             RIdx<=F                                                                                                 jump 1d5
1e5: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=1,L=CCR.L}                                                                      
1e6: swap           0         Y=r0+Q                                                                                                                                           jump 1eb
1e7: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (1ea, 1eb, 1ea, 1eb)
1e8: R[RIdx]        0         Y=D^r5                                                                                                   AFL.EN                                  if DMARequest jsr 785
1e9: swap           0         r4=r4-0  Y=r4-0                                                                                          AFL.EN                                  switch flags(ZM) jump (1e5, 1e5, 1e7, 1e7)
1ea: swap           0         Y=r0+Q                                                                                                                                           jump 6ec
1eb: const:11       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 jump 5ee
1ec: const:ef       0         Y=~(D^0)                                 RIdx<=F                                                                                                 
1ed: swap           0         Y=r0+Q                                                                                                               R[RIdx]<=RES                jump b1
Op_1b:
1ee: const:2        0         r0=D|0  Y=r8                             RIdx<=F                                                                                                 jump 1ff
Op_20:
Op_21:
Op_22:
Op_23:
Op_24:
Op_25:
Op_26:
Op_27:
1ef: bus_read       0         Y=r0+Q                                                                                    Swap                                                   jump 171
1f0: swap           0         r4=r4-0  Y=r4-0                                                                                          AFL.EN                                  if RegOrPageOut jsr 5cc
1f1: swap           1         r9=0+r9  Y=0+r9                          RIdx<=F                                          MemAddr_Cnt    BusCycleEnd                             switch flags(ZM) jump (1f2, 1f3, 1f2, 1f3)
1f2: swap           0         Y=r0+Q                                                                                                                                           jump 1f4
1f3: swap           0         Y=0|Q                                                                                                    AFL.EN      Addr_U/D<=1                 ret
1f4: R[RIdx]        0         r1=D|0  Y=D|0                            RES<=F                                                                                                  if DMARequest jsr 785
1f5: swap           0         Y=0|r1                                                                                                               DataWTClock                 jump 57a
1f6: swap           0         Y=0|r3                                   PTIdx<=F                                                                                                jump 74e
1f7: swap           0         Y=0|r0                                   RES<=F                                                                                                  jump 54c
Op_30:
Op_31:
Op_32:
Op_33:
Op_34:
Op_35:
Op_36:
Op_37:
1f8: bus_read       0         Y=r0+Q                                                                                    Swap                                                   jump 180
Op_19:
1f9: const:c0       0         r0=D|0  Y=D|0                                                                                                                                    jump 1ff
Op_16:
Op_17:
1fa: const:40       0         r0=D|0  Y=r7                             RIdx<=F                                                                                                 jump 1ff
Op_14:
Op_15:
1fb: const:80       0         r0=D|0  Y=r7                             RIdx<=F                                                                                                 jump 1ff
Op_12:
Op_13:
1fc: const:20       0         r0=D|0  Y=r7                             RIdx<=F                                                                                                 jump 1ff
Op_10:
Op_11:
1fd: const:10       0         r0=D|0  Y=r7                             RIdx<=F                                                                                                 jump 1ff
Op_1a:
1fe: const:1        0         r0=D|0  Y=r8                             RIdx<=F                                                                                                 jump 1ff
1ff: CCR            0         r2=~(D^0)  Y=~(D^0)                                                                                                                              if RegIdx & 1 jsr 432 else jump 430
200: R[RIdx.L][CPL] 0         Y=D+r3                                   RES<=F                                           BeginRead      AFL.EN                                  
201: R[RIdx.L][CPL] AFL.C     Y=D+r2                                   RES<=F                                                          AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 3c0
202: swap           0         r0=~(r0^r0)  Y=~(r0^r0)                                                                                                                          jump 360
203: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              if DMARequest jsr 785
204: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 44c
205: R[RIdx.L][CPL] 0         r5=D|0  Y=D|0                            RES<=F                                                                                                  if RegIdx & 1 jsr 482
206: R[RIdx]        0         r4=D|0  Y=D|0                            RES<=F                                                                      WorkAddr_LD_LO              jump 236
207: swap           1         Y=0-r0                                                                                                   AFL.EN                                  if MemFault jsr 73e
208: swap           AFL.C     r5=r1+r5  Y=r1+r5                                                                                        AFL.EN                                  jump 238
209: swap           0         Y=0|r5                                   RES<=F                                                                      DataWTClock                 jump 224
20a: bus_read       1         r1=D+r4  Y=D+r4                                                                                          AFL.EN                                  if MemFault jsr 6
20b: swap           AFL.C     r0=0+r0  Y=r1                            RES<=F                                                          AFL.EN      DataWTClock                 jump 2d9
20c: mar_hi         0         r0=D|0  Y=D|0                                                                                                        R[RIdx.L][CPL]<=RES LSB     
20d: const:f0       0         Y=D^r0                                   RES<=F                                                                                                  
20e: swap           0         r0=(0|r6)>>1  Y=0|r6 RAM7=ALU.S                                                                          BusCycleEnd R[RIdx.L][CPL]<=RES         
20f: swap           0         r0=(0|r0)>>1  Y=0|r0 RAM7=ALU.S                                                                                                                  jump 26b
210: R[RIdx.L][CPL] 1         Y=r3-D                                   RES<=F                                           BeginRead      AFL.EN                                  
211: R[RIdx.L][CPL] AFL.C     Y=r2-D                                   RES<=F                                                          AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 3c0
212: swap           0         r0=r0^r0  Y=r0^r0                                                                                                                                jump 360
213: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              if DMARequest jsr 785
214: CCR            0         Y=~(D^0)                                 RES<=F                                                                      DataWTClock                 jump 5c5
215: R[RIdx.L][CPL] 0         r5=D|0  Y=D|0                            RES<=F                                                                                                  if RegIdx & 1 jsr 482
216: R[RIdx]        0         r4=D|0  Y=D|0                            RES<=F                                                                      WorkAddr_LD_LO              jump 2c4
217: swap           1         Y=0-r0                                                                                                   AFL.EN                                  if MemFault jsr 73e
218: swap           AFL.C     r5=r5-r1  Y=r5-r1                                                                                        AFL.EN                                  jump 238
219: swap           0         Y=0|r5                                   RES<=F                                                                      DataWTClock                 jump 224
21a: bus_read       0         r1=D-r4  Y=D-r4                                                                                          AFL.EN                                  
21b: swap           AFL.C     r0=r0-0  Y=r1                            RES<=F                                                          AFL.EN      DataWTClock                 jump 2d9
21c: swap           0         r9=r9+r9  Y=r9+r9                        RIdx<=F                                                                     R[RIdx.L][CPL]<=RES         if REG_MMIO jsr 63b
21d: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 22c
21e: swap           0         Y=r0+Q                                                                                                                                           if MemFault jsr 1d6
21f: bus_read       0         Y=D|0                                    RES<=F                                           WorkAddr_LD_HI                                 LSB     jump 22f
220: R[RIdx.L][CPL] 0         Y=D&r3                                   RES<=F                                           BeginRead      AFL.EN                                  
221: R[RIdx.L][CPL] 0         Y=D&r2                                   RES<=F                                                          AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 30e
222: swap           0         r0=r0^r0  Y=r0^r0                                                                                                                                jump 360
223: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 2b4
224: swap           0         Y=r0+Q                                                                                    BeginWrite                                             jump 3af
225: R[RIdx.L][CPL] 1         r5=D-r3  Y=D-r3                          RES<=F                                                          AFL.EN                                  if RegIdx & 1 jsr 482
226: R[RIdx]        AFL.C     r0=D-0  Y=D-0                                                                                                        WorkAddr_LD_LO              jump 243
227: swap           1         Y=0-r0                                                                                                   AFL.EN                                  if MemFault jsr 73e
228: swap           AFL.C     r5=r5-r1  Y=r5-r1                                                                                        AFL.EN                                  jump 238
229: swap           0         r8=r8-0  Y=r8-0                                                                           MemAddr_Cnt    AFL.EN                                  jump 3b1
22a: swap           0         Y=0|r4                                   CCR<={V=AFL.Z,M=AFL.S,F=0,L=0}                                              DataWTClock                 
22b: swap           0         r0=0&r4  Y=r4                            RES<=F                                           BeginWrite                                             ret
22c: bus_read       0         Y=D|0                                    RES<=F                                           BeginRead                                              if MemFault jsr 7ae
22d: R[RIdx.L][CPL] 0         Y=D|0                                    RES<=F                                                                      R[RIdx.L][CPL]<=RES         if REG_MMIO jsr 63b
22e: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 21e
22f: R[RIdx.L][CPL] 0         Y=D|0                                    RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     jump 467
230: R[RIdx.L][CPL] 0         Y=D|r3                                   RES<=F                                           BeginRead      AFL.EN                                  
231: R[RIdx.L][CPL] 0         Y=D|r2                                   RES<=F                                                          AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 30e
232: swap           0         r0=~(r0^r0)  Y=~(r0^r0)                                                                                                                          jump 360
233: const:f        0         r3=~(D^0)  Y=~(D^0)                                                                                                                              
234: mar_hi         0         r0=D^r3  Y=D^r3                                                                                                                                  jump 380
235: swap           0         Y=0&r0                                   RES<=F                                                                                                  jump 105
236: swap           0         r9=0|r8  Y=0|r8                          RIdx<=F                                          WorkAddr_LD_HI                                         jump 203|(AR & f0)
237: swap           0         r5=0+r1  Y=0+r1                                                                                          AFL.EN                                  if MemFault jsr 73e
238: swap           0         r7=r5|r7  Y=r5|r7                        CCR<={V=CCR.V,M=CCR.M,F=AFL.OVER,L=AFL.C}                                                               ret
239: swap           0         Y=0|r5                                   RES<=F                                                                      DataWTClock                 jump 224
23a: swap           0         Y=r0+Q                                                                                                                                           if MemFault jsr 6
23b: bus_read       0         r1=r4-D  Y=r4-D                          RES<=F                                                          AFL.EN      DataWTClock                 switch flags(ZM) jump (23d, 23d, 23f, 23f)
23c: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                            RES<=F                                                                                                  jump 23e
23d: swap           AFL.C     r0=0-r0  Y=0-r0                                                                           BeginWrite     AFL.EN                                  jump 2b9
23e: R[RIdx]        0         r0=D|0  Y=D|0                            RES<=F                                                          BusCycleEnd WorkAddr_LD_LO              jump 27b
23f: swap           0         r0=~(0^r0)  Y=~(0^r0)                                                                     BeginWrite     AFL.EN                                  jump 2a9
240: R[RIdx.L][CPL] 0         Y=D^r3                                   RES<=F                                           BeginRead      AFL.EN                                  
241: R[RIdx.L][CPL] 0         Y=D^r2                                   RES<=F                                                          AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 30e
242: swap           0         r0=r0^r0  Y=r0^r0                                                                                                                                jump 360
243: swap           0         r4=0|r0  Y=0|r0                          RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     
244: swap           0         r9=0|r8  Y=0|r8                          RIdx<=F                                          WorkAddr_LD_HI             R[RIdx.L][CPL]<=RES         jump 203|(AR & f0)
245: R[RIdx.L][CPL] 0         Y=D|0                                    RES<=F                                                                                                  if RegIdx & 1 jsr 482
246: R[RIdx]        0         Y=D|0                                    RES<=F                                                                      WorkAddr_LD_LO              jump 349
247: swap           1         Y=0-r0                                                                                                   AFL.EN                                  if MemFault jsr 73e
248: swap           AFL.C     r5=0-r1  Y=0-r1                                                                                          AFL.EN                                  jump 238
249: swap           0         Y=0|r5                                   RES<=F                                                                      DataWTClock                 jump 224
24a: bus_read       0         Q=D|0 Y=D|0                                                                                                                                      jump 40b
24b: bus_read       0         r5=D|0  Y=D|0                                                                             Swap                                                   if MemFault jsr 466
24c: const:6        0         Y=D+r5                                                                                                   AFL.EN                                  
24d: swap           0         r9=D|0  Y=D|0                            AR<=F                                                                                                   switch flags(VH) jump (24e, 24f, 24e, 24f)
24e: swap           0         Y=0|r9                                   RIdx<=F                                                                                                 jump 4|(AR & f0)
24f: swap           0         Y=0&r0                                   RES<=F                                                                                                  jump 105
250: swap           0         Y=0|r3                                   RES<=F                                           BeginRead      AFL.EN                                  
251: swap           0         Y=0|r2                                   RES<=F                                                          AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 30e
252: swap           0         Y=0|r7                                   RES<=F                                                                                                  jsr 4ee
253: const:8        0         r6=(~D)&r6  Y=(~D)&r6                                                                                                                            
254: const:6f       0         r9=r8-D  Y=r8-D                                                                                                                                  jump 195
255: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                            RES<=F                                                                                                  if RegIdx & 1 jsr 482
256: R[RIdx]        0         r0=D|0  Y=D|0                            RES<=F                                                                      WorkAddr_LD_LO              jump 34c
257: swap           0         Q=r3+Q Y=r3+Q                                                                                            AFL.EN                                  if DMARequest jsr 785
258: swap           AFL.C     r4=r2+r4  Y=r2+r4                                                                                                                                jump 2e8
259: swap           1         Q=Q-r3 Y=Q-r3                                                                                            AFL.EN                                  jsr 7b
25a: bus_read       0         r1=D|0  Y=D|0                            CCR<={V=CCR.V,M=CCR.M,F=0,L=CCR.L}                                                                      jump 40b
25b: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              if DMARequest jsr 785
25c: R[RIdx.L][CPL] 0         Y=D|0                                    RES<=F                                           BeginRead                                      LSB     jump 738
25d: swap           0         r8=0|r9  Y=0|r9                                                                                                      WorkAddr_LD_LO              if REG_MMIO jsr 63b
25e: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump a6
25f: swap           1         r1=r1+r1  Y=r1+r1                                                                                        AFL.EN                                  if DMARequest jsr 785
260: swap           AFL.C     r0=r0+r0  Y=r0+r0                                                                                        AFL.EN                                  ret
261: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=AFL.OVER,L=CCR.L}                                   R[RIdx.L][CPL]<=RES         jump STK0
262: swap           0         Y=r0+Q                                                                                                                                           jump 252
263: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 294
264: swap           0         r5=0|r2  Y=0|r2                                                                                                                                  jump 207|(AR & f0)
265: R[RIdx.L][CPL] 0         Y=D-r0                                   RES<=F                                                          AFL.EN                                  jump 33e
266: swap           0         r4=r4-0  Y=r9                            RIdx<=F                                                         AFL.EN                                  if REG_MMIO jsr 63b
267: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
268: bus_read       0         Y=D|0                                    RES<=F                                                                                                  if MemFault jsr 1d6
269: swap           1         r9=0+r9  Y=0+r9                                                                                                      R[RIdx.L][CPL]<=RES         switch flags(ZM) jump (26e, 26f, 26e, 26f)
26a: bus_read       0         Q=D|0 Y=D|0                                                                                                                                      jump 40b
26b: swap           0         r0=(0|r0)>>1  Y=0|r0 RAM7=ALU.S                                                                                                                  if DMARequest jsr 785
26c: const:e1       0         r0=((~D)&r0)>>1  Y=(~D)&r0 RAM7=ALU.S                                                                                                            
26d: swap           0         Y=r9+r9                                  RIdx<=F                                                                                                 jump 278
26e: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 266
26f: const:55       0         r0=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 jump 2a0
270: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                                                                                                                                    if DMARequest jsr 785
271: R[RIdx]        0         r0=D|0  Y=D|0                                                                                                                                    jump 477
272: swap           0         Y=r0+Q                                                                                                                                           jump 252
273: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                                                           jump 100
274: swap           0         Q=0&r0 Y=0&r0                                                                             BeginRead                                              jump 371
275: swap           0         Y=0&r0                                   RES<=F                                                                                                  jump 105
276: swap           0         r5=r5-0  Y=r1                            RES<=F                                                          AFL.EN                                  if DMARequest jsr 785
277: swap           0         Y=r4+Q                                                                                                   AFL.EN                                  switch flags(ZM) jump (27e, 27f, 27e, 27f)
278: const:f        0         r1=~(D^0)  Y=~(D^0)                                                                                                                              
279: CCR            0         r2=(~D)&r0  Y=(~D)&r0                                                                                                                            jump 28d
27a: bus_read       0         r1=D|0  Y=D|0                            CCR<={V=CCR.V,M=CCR.M,F=0,L=CCR.L}                                                                      jump 40b
27b: const:2        0         Y=D+r1                                   RES<=F                                           WorkAddr_LD_HI AFL.EN                                  
27c: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              
27d: swap           AFL.C     Y=0+r0                                   RES<=F                                           BeginRead                  R[RIdx.L][CPL]<=RES LSB     jump 21c
27e: swap           1         r1=(0|r1)>>1 Q>>=1 Y=0|r1 RAM7=AFL.C                                                                                                             jump 276
27f: swap           0         Y=0|r1                                   CCR<={V=AFL.Z,M=AFL.S,F=CCR.F,L=AFL.C}           BeginRead      AFL.EN                                  jump 291
280: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                                                                                                                                    if DMARequest jsr 785
281: R[RIdx]        0         r0=D|0  Y=D|0                                                                                                                                    jump 487
282: swap           1         r8=0+r8  Y=0+r8                                                                                                                                  jump 176
283: swap           0         Y=0&r0                                   WorkAddr<=RES                                    WorkAddr_LD_HI AFL.EN      WorkAddr_LD_LO              
284: swap           0         Y=r0+Q                                                                                    BeginRead                                              
285: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 63b
286: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              if DMARequest jsr 785
287: bus_read       0         Y=D|0                                    RES<=F                                           BeginRead      AFL.EN                                  if MemFault jsr 77e
288: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=CCR.F,L=CCR.L}                               R[RIdx.L][CPL]<=RES LSB     jump STK0
289: R[RIdx]        0         r11=D|0  Y=D|0                                                                                                                                   jump 101
28a: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                                                                                                                                    if RegIdx & 1 jsr 362
28b: R[RIdx]        0         r0=D|0  Y=D|0                                                                                                                                    if REG_MMIO jsr 633
28c: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 36c
28d: swap           0         Y=r2|r0                                  RES<=F                                                                                                  jump 480
28e: swap           0         r9=D+r4  Y=D+r4                          RIdx<=F                                                                                                 jump 3fc
28f: swap           0         r9=D|0  Y=D|0                                                                             BeginRead                                              jump 266
290: unused
291: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=CCR.F,L=CCR.L}                                      R[RIdx.L][CPL]<=RES         jump STK0
292: swap           1         r8=0+r8  Y=0+r8                                                                                                                          LSB     jump 766
293: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              
294: swap           0         Y=r0+Q                                                                                    BeginRead                                              
295: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 63b
296: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
297: bus_read       0         r2=D|0  Y=D|0                            RES<=F                                           BeginRead                                              if MemFault jsr 7ae
298: swap           0         Y=r0+Q                                                                                                               R[RIdx.L][CPL]<=RES         if REG_MMIO jsr 63b
299: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              jump 39a
29a: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                                                                                                                                    if RegIdx & 1 jsr 362
29b: R[RIdx]        0         r0=D|0  Y=D|0                                                                                                                                    if REG_MMIO jsr 633
29c: swap           0         Y=r1+r3                                  RES<=F                                                          AFL.EN                                  jump 367
29d: swap           0         r9=r9-0  Y=r9-0                          RIdx<=F                                                                                                 if RegOrPageOut jsr 66c
29e: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             if DMARequest jsr 785
29f: swap           0         r4=r4-0  Y=r4-0                                                                                          AFL.EN                                  jump 2cd
2a0: mar_lo         0         Y=D|0                                    RES<=F                                                                                                  
2a1: mar_hi         0         Y=~(D^r5)                                RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     jump 3fa
2a2: swap           0         Y=r0^r0                                  RES<=F                                                                                                  jump 105
2a3: swap           0         Y=0&r0                                   WorkAddr<=RES                                    WorkAddr_LD_HI AFL.EN      WorkAddr_LD_LO      LSB     
2a4: R[RIdx]        0         r2=D|0  Y=D|0                            RES<=F                                                                      DataWTClock                 
2a5: swap           0         Y=0|r2                                                                                    BeginWrite     AFL.EN                                  
2a6: swap           0         Y=r0+Q                                                                                                                                           if RegOrPageOut jsr 66c
2a7: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                   BusCycleEnd                             
2a8: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=CCR.F,L=CCR.L}    BeginRead                                              jump STK0
2a9: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=CCR.F,L=CCR.L}                                                           ret
2aa: R[RIdx.L][CPL] 1         r1=D-r3  Y=D-r3                          RES<=F                                                          AFL.EN                                  if RegIdx & 1 jsr 362
2ab: R[RIdx.L][CPL] AFL.C     r0=D-0  Y=D-0                            RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     if REG_MMIO jsr 633
2ac: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd R[RIdx.L][CPL]<=RES         jump 36a
2ad: swap           0         Y=0|r2                                   CPL<=F                                                                                                  jump 101
2ae: swap           0         Y=r0+Q                                                                                                                                           jsr 48e
2af: const:f5       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 
2b0: const:fb       0         r9=~(D^0)  Y=~(D^0)                                                                                                                      LSB     
2b1: R[RIdx.L][CPL] 1         r0=D+0  Y=D+0                            RES<=F                                                          AFL.EN                                  jump 2d0
2b2: swap           0         Y=r0^r0                                  RES<=F                                                                                                  jump 105
2b3: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              
2b4: R[RIdx.L][CPL] 0         r2=D|0  Y=D|0                            RES<=F                                                                      DataWTClock         LSB     
2b5: R[RIdx]        0         Q=D|0 Y=D|0                                                                               BeginWrite                                             
2b6: swap           0         Y=r0+Q                                                                                                                                           if RegOrPageOut jsr 66c
2b7: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
2b8: swap           0         Y=0|Q                                    RES<=F                                                          AFL.EN      DataWTClock                 jump 2a5
2b9: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=AFL.OVER,L=AFL.C}                                                        ret
2ba: swap           0         Y=0&r0                                   RES<=F                                                                                                  jump 2de
2bb: bus_read       0         r3=D|0  Y=D|0                            RES<=F                                                                      R[RIdx.L][CPL]<=RES         
2bc: swap           0         r3=r3+r3  Y=r3                           PTIdx<=F                                                                                                
2bd: swap           0         r3=r3+r3  Y=r3+r3                                                                                                                                
2be: swap           0         r3 =(r3+r3)<<1  Y=r3+r3 Q0=0                                                                                                                     
2bf: swap           0         r3=r4&r3  Y=r4&r3                                                                                                                                
2c0: swap           0         r6=(~r4)&r6  Y=(~r4)&r6                  WorkAddr<=RES                                                                                           
2c1: swap           0         r6=r3|r6  Y=r3|r6                                                                         BeginRead                                              jump 2ad
2c2: swap           0         Y=r0^r0                                  RES<=F                                                                                                  jump 105
2c3: swap           0         Y=0&r0                                   WorkAddr<=RES                                    WorkAddr_LD_HI AFL.EN      WorkAddr_LD_LO              jump 284
2c4: swap           0         Y=r5+r3                                  RES<=F                                           WorkAddr_LD_HI AFL.EN                                  
2c5: swap           AFL.C     Y=0+r4                                   RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     
2c6: swap           0         r9=0|r8  Y=0|r8                          RIdx<=F                                                                     R[RIdx.L][CPL]<=RES         jump 203|(AR & f0)
2c7: swap           0         r1=0|r0  Y=0|r0                                                                                                                                  jsr f0
2c8: swap           0         r5=0|Q  Y=0|Q                                                                                                                                    if DMARequest jsr 785
2c9: swap           0         r0=0|r4  Y=0|r4                                                                                                                                  jump 2d4
2ca: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                                                                                                                                    if RegIdx & 1 jsr 362
2cb: R[RIdx]        0         r0=D|0  Y=D|0                                                                                                                                    if REG_MMIO jsr 633
2cc: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 37a
2cd: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=0                 switch flags(ZM) jump (2ce, 2cf, 2ce, 2cf)
2ce: R[RIdx]        0         Y=D|0                                    RES<=F                                           MemAddr_Cnt                DataWTClock                 jump 3fe
2cf: const:55       0         Y=~(D^0)                                 RIdx<=F                                                                     Addr_U/D<=1                 jump 2a0
2d0: R[RIdx]        AFL.C     r1=D+0  Y=D+0                            RES<=F                                                                      WorkAddr_LD_LO              
2d1: swap           0         Y=0|r9                                   RIdx<=F                                          WorkAddr_LD_HI                                         jump 25b
2d2: swap           0         Y=r0^r0                                  RES<=F                                                                                                  jump 105
2d3: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 294
2d4: swap           0         r4=0&r0  Y=0&r0                                                                           Swap                                                   jsr fe
2d5: swap           0         r3=D|0  Y=D|0                                                                                                                                    if DMARequest jsr 785
2d6: const:f1       0         r3=(~D)&r3  Y=(~D)&r3                    RIdx<=F                                                                                                 
2d7: const:c2       0         r3=D|r3  Y=D|r3                          CCR<={V=AFL.Z,M=AFL.S,F=0,L=0}                                                                          
2d8: swap           0         r7=r7+Q  Y=r7+Q                                                                                          AFL.EN                                  jump 2e4
2d9: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=AFL.OVER,L=CCR.L} BeginWrite                                             ret
2da: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                                                                                                                                    if RegIdx & 1 jsr 362
2db: R[RIdx]        0         r0=D|0  Y=D|0                                                                                                                                    if REG_MMIO jsr 633
2dc: const:2        0         Y=D+r1                                   RES<=F                                                          AFL.EN                                  
2dd: swap           AFL.C     Y=0+r0                                   RES<=F                                           MemAddr_Cnt    BusCycleEnd R[RIdx.L][CPL]<=RES LSB     jump 378
2de: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             jump 105
2df: unused
2e0: swap           0         r6=(~r0)&r6  Y=(~r0)&r6                                                                   BeginRead                                              
2e1: swap           0         r6=r1|r6  Y=r1|r6                                                                         BeginRead                                              jump 101
2e2: swap           0         Y=r0^r0                                  RES<=F                                                                                                  jump 105
2e3: swap           0         Y=0&r0                                   WorkAddr<=RES                                    WorkAddr_LD_HI AFL.EN      WorkAddr_LD_LO      LSB     jump 2a4
2e4: swap           AFL.C     Y=r4+r5                                  RES<=F                                                          AFL.EN                                  jsr 3f8
2e5: swap           0         Y=0|r7                                   RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     if DMARequest jsr 785
2e6: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=1,L=CCR.L}        BeginRead                  R[RIdx.L][CPL]<=RES         jump STK0
2e7: swap           0         Y=0|r7                                   RES<=F                                           BeginRead      AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 30e
2e8: swap           0         r1=r1+r1  Y=r1+r1                                                                                        AFL.EN                                  
2e9: swap           AFL.C     r0=r0+r0  Y=r0+r0                                                                                        AFL.EN                                  ret
2ea: R[RIdx.L][CPL] 0         r1=D-r0  Y=D-r0                          RES<=F                                                          AFL.EN                                  if RegIdx & 1 jsr 362
2eb: R[RIdx.L][CPL] AFL.C     r0=D-0  Y=D-0                            RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     if REG_MMIO jsr 633
2ec: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd R[RIdx.L][CPL]<=RES         jump 37c
2ed: swap           0         Q=0|r1 Y=0|r1                                                                                                                                    
2ee: swap           0         r0=(0|r0)>>1 Q>>=1 Y=0|r0 RAM7=ALU.S     CCR<={V=CCR.V,M=CCR.M,F=CCR.F,L=ALU.SHIFT_Q0}                                                           
2ef: swap           0         Y=0|Q                                    RES<=F                                                          AFL.EN                                  jump 1d
2f0: swap           0         Y=r2^Q                                                                                                   AFL.EN      Addr_U/D<=1                 
2f1: swap           0         Y=r0+Q                                                                                                               R[RIdx]<=RES        LSB     switch flags(ZM) jump (2fd, 2fd, 2ff, 2ff)
2f2: swap           0         Y=r0^r0                                  RES<=F                                                                                                  jump 105
2f3: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 2b4
2f4: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 63b
2f5: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
2f6: bus_read       0         r2=D|0  Y=D|0                                                                             BeginRead                                              if MemFault jsr 7ae
2f7: swap           0         r9=r5&r9  Y=r5&r9                        RIdx<=F                                                                                                 if REG_MMIO jsr 63b
2f8: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              jump 406|(AR & f0)
2f9: R[RIdx]        0         r2=D|0  Y=r4                             RIdx<=F                                                                                                 jump 76f; pop
2fa: swap           0         Y=0&r0                                   RES<=F                                                                                                  jump 2de
2fb: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI                                         
2fc: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                                                           jump 100
2fd: swap           0         r15=0|r2  Y=0|r2                                                                                                                                 jump 780
2fe: const:e1       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 jump 71e
2ff: swap           0         Y=r0+Q                                                                                                               ABT_LED<=1                  jump 2fe
300: bus_read       0         r1=D|0  Y=D|0                            RES<=F                                           BeginRead                                              if MemFault jsr 636
301: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
302: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd R[RIdx.L][CPL]<=RES         if DMARequest jsr 785
303: bus_read       0         Y=D|0                                    RES<=F                                           BeginRead      AFL.EN                                  if MemFault jsr 636
304: swap           0         Y=0|r1                                                                                                   AFL.EN                                  jump 306
305: bus_read       0         Y=D|0                                    RES<=F                                           BeginRead      AFL.EN                                  if MemFault jsr 636
306: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=CCR.F,L=CCR.L}                               R[RIdx.L][CPL]<=RES LSB     jump STK0
307: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=AFL.OVER,L=CCR.L}                            R[RIdx.L][CPL]<=RES LSB     jump STK0
308: R[RIdx]        0         r1=D|0  Y=D|0                                                                                                                                    jump 120|(AR & f)
309: R[RIdx.L][CPL] AFL.C     Y=D+0                                    RES<=F                                           BeginRead      AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 30b
30a: R[RIdx.L][CPL] AFL.C     Y=D-0                                    RES<=F                                           BeginRead      AFL.EN      R[RIdx.L][CPL]<=RES LSB     
30b: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=AFL.OVER,L=CCR.L}                            R[RIdx.L][CPL]<=RES         jump STK0
30c: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=AFL.OVER,L=AFL.C}                            R[RIdx.L][CPL]<=RES LSB     jump STK0
30d: swap           0         Y=0|r8                                   RIdx<=F                                                                                                 jump 547
30e: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=CCR.F,L=CCR.L}    BeginRead                  R[RIdx.L][CPL]<=RES         jump STK0
30f: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                     LSB     
310: R[RIdx]        0         r2=D|0  Y=D|0                            RES<=F                                                                      DataWTClock                 jump 316
311: swap           0         r2=0|r0  Y=0|r0                          RES<=F                                                                      DataWTClock         LSB     
312: R[RIdx]        0         r1=D|0  Y=D|0                                                                             BeginWrite                                             
313: swap           0         Y=r0+Q                                                                                                                                           if RegOrPageOut jsr 6fc
314: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
315: swap           0         Y=0|r1                                   RES<=F                                                          AFL.EN      DataWTClock                 
316: swap           0         Y=0|r2                                                                                    BeginWrite     AFL.EN                                  
317: swap           0         Y=r0+Q                                                                                                                                           if RegOrPageOut jsr 6fc
318: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=CCR.F,L=CCR.L}    MemAddr_Cnt    BusCycleEnd                             
319: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 101
31a: R[RIdx.L][CPL] 0         r2=D|0  Y=D|0                            RES<=F                                                                      DataWTClock         LSB     jump 312
31b: swap           0         r8=0&r0  Y=0&r0                                                                                                                          LSB     jump 31d
31c: swap           1         r8=0+r8  Y=0+r8                                                                                                                          LSB     
31d: R[RIdx.L][CPL] 0         Y=D|0                                    RES<=F                                                                                                  
31e: R[RIdx]        0         Y=D|0                                    RES<=F                                                          BusCycleEnd WorkAddr_LD_LO              if DMARequest jsr 785
31f: swap           0         r9=0|r8  Y=0|r8                          RIdx<=F                                          WorkAddr_LD_HI                                         jump 203|(AR & f0)
320: R[RIdx]        0         Y=D+r0                                   RES<=F                                           BeginRead      AFL.EN                                  jump 3c0
321: R[RIdx]        1         Y=D-r0                                   RES<=F                                           BeginRead      AFL.EN                                  jump 3c0
322: R[RIdx]        0         Y=D&r0                                   RES<=F                                           BeginRead      AFL.EN                                  jump 30e
323: R[RIdx]        0         Y=D|r0                                   RES<=F                                           BeginRead      AFL.EN                                  jump 30e
324: R[RIdx]        0         Y=D^r0                                   RES<=F                                           BeginRead      AFL.EN                                  jump 30e
325: R[RIdx]        0         Y=D|0                                    RES<=F                                           BeginRead      AFL.EN                                  jump 30e
326: const:f        0         r0=~(D^0)  Y=~(D^0)                                                                                                                              jsr 3f0
327: swap           0         r9=0|r8  Y=0|r8                          RIdx<=F                                          WorkAddr_LD_HI                                         jump 203|(AR & f0)
328: R[RIdx]        0         Y=D+r1                                   RES<=F                                                          AFL.EN                                  jump 30c
329: R[RIdx]        1         Y=r1-D                                   RES<=F                                                          AFL.EN                                  jump 30c
32a: R[RIdx]        0         Y=D&r1                                   RES<=F                                                          AFL.EN                                  jump 306
32b: const:fb       0         Y=~(D^0)                                 RIdx<=F                                                                                                 jump 300|(STK0 & f)|(AR & f0); pop
32c: const:f9       0         Y=~(D^0)                                 RIdx<=F                                                                                                 jump 300|(STK0 & f)|(AR & f0); pop
32d: const:fd       0         Y=~(D^0)                                 RIdx<=F                                                                                                 jump 300|(STK0 & f)|(AR & f0); pop
32e: const:f7       0         Y=~(D^0)                                 RIdx<=F                                                                                                 jump 300|(STK0 & f)|(AR & f0); pop
32f: const:f5       0         Y=~(D^0)                                 RIdx<=F                                                                                                 jump 300|(STK0 & f)|(AR & f0); pop
330: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI                                         jump 357
331: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 342
332: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 352
333: bus_read       0         r1=D|0  Y=D|0                                                                                            AFL.EN                                  jump 326
334: bus_read       0         r1=D|0  Y=D|0                                                                                            AFL.EN                                  jump 336
335: bus_read       0         Y=r0+Q                                                                                    Swap                                                   jump 347
336: const:f        0         r0=~(D^0)  Y=~(D^0)                                                                                                                              jsr 3f0
337: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI                                         jump 357
338: R[RIdx.L][CPL] 0         Y=D+r1                                   RES<=F                                                          AFL.EN                                  jump 201
339: R[RIdx.L][CPL] 1         Y=r1-D                                   RES<=F                                                          AFL.EN                                  jump 211
33a: R[RIdx.L][CPL] 0         Y=D&r1                                   RES<=F                                                          AFL.EN                                  jump 221
33b: bus_read       0         r9=D|0  Y=D|0                            RIdx<=F                                          Swap                                                   if MemFault jsr 466
33c: swap           0         Y=D|0                                    RIdx<=F                                                                                                 
33d: R[RIdx.L][CPL] 0         r0=D|0  Y=r9                             RIdx<=F                                                                                                 jump 320|(AR & f)
33e: R[RIdx]        AFL.C     r0=D-0  Y=D-0                                                                                                        WorkAddr_LD_LO              if RegIdx & 1 jsr 482
33f: swap           0         Y=0|r0                                   RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     
340: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI             R[RIdx.L][CPL]<=RES         jump 357
341: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=CCR.F,L=CCR.L}                               R[RIdx.L][CPL]<=RES LSB     jump STK0
342: swap           0         Y=r0+Q                                                                                                                                           if MemFault jsr 636
343: bus_read       0         r4=D|0  Y=D|0                            RES<=F                                                                                                  if REG_MMIO jsr 633
344: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
345: bus_read       0         r5=D|0  Y=D|0                            RES<=F                                           WorkAddr_LD_HI                                         if MemFault jsr 466
346: swap           0         r9=0|r8  Y=0|r8                          RIdx<=F                                                                     WorkAddr_LD_LO              jump 203|(AR & f0)
347: swap           0         r9=D|0  Y=D|0                            AR<=F                                                           AFL.EN                                  if MemFault jsr 466
348: swap           0         r0=0&r9  Y=r9                            RIdx<=F                                                                                                 switch flags(ZM) jump (34a, 34b, 34a, 34b)
349: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI                                         jump 357
34a: swap           1         r0=0+r0  Y=r7                            AR<=F                                                                                           LSB     jump 205|(AR & f0)
34b: swap           1         r0=0+r0  Y=r7                            AR<=F                                            BeginRead                                      LSB     jump 20a|(AR & f0)
34c: const:2        0         Y=D+r1                                   RES<=F                                           WorkAddr_LD_HI AFL.EN                                  
34d: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              if DMARequest jsr 785
34e: swap           AFL.C     Y=0+r0                                   RES<=F                                           BeginRead                  R[RIdx.L][CPL]<=RES LSB     
34f: swap           0         Y=r0+Q                                                                                                               R[RIdx.L][CPL]<=RES         if REG_MMIO jsr 63b
350: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 35b
351: R[RIdx.L][CPL] 0         Y=D|0                                    RES<=F                                                          AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 30e
352: swap           0         Y=r0+Q                                                                                                                                           if MemFault jsr 636
353: bus_read       0         r4=D|0  Y=D|0                            RES<=F                                                                                                  if REG_MMIO jsr 633
354: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
355: bus_read       0         r5=D|0  Y=D|0                            RES<=F                                           WorkAddr_LD_HI                                         if MemFault jsr 466
356: swap           0         Y=r0+Q                                                                                                               WorkAddr_LD_LO              
357: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              
358: swap           0         Y=r0+Q                                                                                    BeginRead                                              
359: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 63b
35a: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
35b: bus_read       0         r4=D|0  Y=D|0                            RES<=F                                           BeginRead                                              if MemFault jsr 7ae
35c: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 63b
35d: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              
35e: swap           0         Y=r0+Q                                                                                                                                           if MemFault jsr 78e
35f: bus_read       0         r5=D|0  Y=D|0                            RES<=F                                           WorkAddr_LD_HI                                         jump 346
360: swap           0         r7=r8+r7  Y=r8+r7                        RES<=F                                                          AFL.EN                                  jsr 4d9
361: swap           0         Q=0&r0 Y=0&r0                                                                             BeginRead                                              jump 3b4
362: swap           0         Y=0&r0                                   RES<=F                                                          BusCycleEnd                             jump 105
363: swap           0         r9=0|r8  Y=0|r8                                                                                                                                  if MemFault jsr 636
364: swap           0         r9=r5&r9  Y=r5&r9                        RIdx<=F                                                                                                 if REG_MMIO jsr 633
365: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
366: swap           0         Y=r0+Q                                                                                                                                           if MemFault jsr 466 else jump 406|(AR & f0)
367: swap           AFL.C     Y=0+r0                                   RES<=F                                           MemAddr_Cnt    BusCycleEnd R[RIdx.L][CPL]<=RES LSB     
368: bus_read       0         Y=D|0                                                                                                    AFL.EN      R[RIdx.L][CPL]<=RES         if MemFault jsr 466
369: bus_read       0         r5=D+r1  Y=D+r1                          RES<=F                                                          AFL.EN                                  switch flags(ZM) jump (36e, 36f, 36e, 36f)
36a: bus_read       0         Y=D|0                                                                                                    AFL.EN                                  if MemFault jsr 466
36b: bus_read       0         r5=D+r1  Y=D+r1                          RES<=F                                                          AFL.EN                                  switch flags(ZM) jump (36e, 36f, 36e, 36f)
36c: bus_read       0         Y=D|0                                                                                                    AFL.EN                                  if MemFault jsr 466
36d: bus_read       0         r5=D+r1  Y=D+r1                          RES<=F                                                          AFL.EN                                  switch flags(ZM) jump (36e, 36f, 36e, 36f)
36e: swap           AFL.C     r4=0+r0  Y=0+r0                          RES<=F                                                                      WorkAddr_LD_LO              jump 370
36f: swap           AFL.C     r4=r0-0  Y=r0-0                          RES<=F                                                                      WorkAddr_LD_LO              
370: swap           0         r9=0|r8  Y=0|r8                          RIdx<=F                                          WorkAddr_LD_HI                                         jump 203|(AR & f0)
371: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
372: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             if DMARequest jsr 785
373: bus_read       0         r1=D|0  Y=D|0                                                                                                                                    if MemFault jsr 73e
374: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=0                 jsr 264
375: swap           AFL.C     r0=r0-r0  Y=r0-r0                        RIdx<=F                                          MemAddr_Cnt                                            
376: swap           0         Y=r4^r5                                                                                                  AFL.EN                                  jump 39c
377: swap           0         Y=r0+Q                                                                                                               R[RIdx]<=RES                jump 101
378: bus_read       0         Y=D|0                                                                                                    AFL.EN      R[RIdx.L][CPL]<=RES         if MemFault jsr 466
379: bus_read       0         Y=D+r1                                   RES<=F                                                          AFL.EN                                  switch flags(ZM) jump (37e, 37f, 37e, 37f)
37a: bus_read       0         Y=D|0                                                                                                    AFL.EN                                  if MemFault jsr 466
37b: bus_read       0         Y=D+r1                                   RES<=F                                                          AFL.EN                                  switch flags(ZM) jump (37e, 37f, 37e, 37f)
37c: bus_read       0         Y=D|0                                                                                                    AFL.EN                                  if MemFault jsr 466
37d: bus_read       0         Y=D+r1                                   RES<=F                                                          AFL.EN                                  switch flags(ZM) jump (37e, 37f, 37e, 37f)
37e: swap           AFL.C     Y=0+r0                                   RES<=F                                                                      WorkAddr_LD_LO              jump 330
37f: swap           AFL.C     Y=r0-0                                   RES<=F                                                                      WorkAddr_LD_LO              jump 330
380: mar_lo         0         Y=D|0                                    RES<=F                                                                                          LSB     
381: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                                                                                                                                    if DMARequest jsr 785
382: R[RIdx.L][CPL] 0         r0=D|0  Y=r0                             RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     
383: const:f5       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                     R[RIdx.L][CPL]<=RES         
384: const:fd       0         r2=~(D^0)  Y=~(D^0)                      WorkAddr<=RES                                                                                   LSB     
385: R[RIdx.L][CPL] 1         r2=D-r2  Y=D-r2                          RES<=F                                                          AFL.EN                                  
386: R[RIdx]        AFL.C     Y=D-0                                    RES<=F                                                                      WorkAddr_LD_LO              if DMARequest jsr 785
387: swap           0         Y=0|r0                                                                                    WorkAddr_LD_HI             DataWTClock                 
388: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              
389: swap           0         Y=0|r2                                   RES<=F                                                                      R[RIdx.L][CPL]<=RES         
38a: swap           0         Y=r0+Q                                                                                    BeginWrite                 R[RIdx.L][CPL]<=RES LSB     
38b: swap           0         Y=0|r0                                   RES<=F                                                                                                  if RegOrPageOut jsr 5c4
38c: swap           0         r9=r8+r9  Y=r8+r9                        RIdx<=F                                          MemAddr_Cnt    BusCycleEnd                             
38d: swap           0         Y=0|r1                                                                                                               DataWTClock                 
38e: swap           0         Y=0|r4                                   RES<=F                                           BeginWrite                                             
38f: swap           0         Y=0|r1                                   RES<=F                                           WorkAddr_LD_HI             R[RIdx.L][CPL]<=RES         if RegOrPageOut jsr 5c4
390: swap           0         Y=0|r5                                   RES<=F                                                          BusCycleEnd                             if DMARequest jsr 785
391: swap           0         Y=r0+Q                                                                                                               WorkAddr_LD_LO              
392: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                               R[RIdx.L][CPL]<=RES LSB     jump 100
393: swap           0         r4=r4+r4  Y=r4+r4                        CCR<={V=CCR.V,M=CCR.M,F=0,L=0}                                                                          
394: swap           0         r5=0|r1  Y=0|r1                                                                                                                                  
395: swap           0         r7=0|r2  Y=0|r2                                                                                                                                  jsr 3a7
396: swap           0         Y=~(r0^r0)                                                                                               AFL.EN                                  jsr 45e
397: mar_lo         0         Y=D|0                                    RES<=F                                                                                                  jsr 4ea
398: swap           0         Y=0|r4                                   AR<=F                                                                                                   if DMARequest jsr 785
399: swap           0         r9=r9^r9  Y=r9^r9                        RIdx<=F                                                                                                 jump 202|(AR & f0)
39a: bus_read       0         Y=D|0                                    RES<=F                                           BeginRead      AFL.EN                                  if MemFault jsr 77e
39b: swap           0         Y=0|r2                                                                                                   AFL.EN                                  jump 288
39c: swap           0         r8=r8-0  Y=r8-0                                                                                          AFL.EN                                  switch flags(ZM) jump (39d, 39d, 39f, 39f)
39d: swap           0         Q=~(r0^r0) Y=~(r0^r0)                                                                                    AFL.EN                                  switch flags(ZM) jump (3ca, 3cb, 3ca, 3cb)
39e: swap           0         Y=0|r6                                                                                                   AFL.EN                          LSB     jump 46c
39f: swap           0         Y=0|Q                                                                                                    AFL.EN                                  switch flags(ZM) jump (3ca, 3cb, 3ca, 3cb)
3a0: bus_read       0         r8=D|0  Y=D|0                                                                             BeginRead                                              if MemFault jsr 636
3a1: const:f0       0         r0=~(D^0)  Y=~(D^0)                                                                                                                              
3a2: bus_read       0         r8=r0&r8  Y=r0&r8                                                                         Swap                                                   if REG_MMIO jsr 633
3a3: swap           0         r3=D&r0  Y=D&r0                                                                           MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
3a4: bus_read       0         r4=D|0  Y=D|0                                                                                                                                    if MemFault jsr 466
3a5: swap           0         Y=r0^r0                                                                                                  AFL.EN                                  jsr 44e
3a6: swap           0         Q=0|r4 Y=0|r4                                                                                                                                    switch flags(ZM) jump (3aa, 3ab, 3aa, 3ab)
3a7: swap           0         r9=0|r3  Y=0|r3                                                                                                                                  
3a8: swap           0         r3=0|r8  Y=0|r8                                                                                                                                  if DMARequest jsr 785
3a9: swap           0         r8=0|r9  Y=0|r9                                                                                                                                  ret
3aa: swap           0         r4=r4+r4  Y=r4+r4                                                                                                                                jump 393
3ab: swap           0         r9=0|r3  Y=0|r3                                                                                                                                  jsr 3a8
3ac: swap           0         Y=r0+Q                                                                                                                                           jump 397
3ad: R[RIdx.L][CPL] 0         r3=D|0  Y=r5                             RIdx<=F                                                         AFL.EN                                  jump 3ae
3ae: R[RIdx.L][CPL] 0         r2=D|0  Y=D|0                                                                                                                            LSB     jump 200|(AR & f0)
3af: swap           0         r8=r8-0  Y=r8-0                                                                                          AFL.EN                                  if RegOrPageOut jsr 5cc
3b0: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
3b1: swap           0         r3=r3-0  Y=r3-0                                                                                          AFL.EN                                  switch flags(ZM) jump (3b2, 3b3, 3b2, 3b3)
3b2: swap           0         Y=0|r5                                   WorkAddr<=RES                                    WorkAddr_LD_HI AFL.EN      WorkAddr_LD_LO              switch flags(ZM) jump (3b6, 3b7, 3b6, 3b7)
3b3: swap           0         Y=0|r1                                                                                                   AFL.EN                                  switch flags(ZM) jump (3c2, 3c3, 3c2, 3c3)
3b4: swap           0         r7=0&r0  Y=0&r0                                                                                                                                  if REG_MMIO jsr 643
3b5: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              jump 3d2
3b6: swap           0         Y=r0+Q                                                                                    BeginRead                  Addr_U/D<=0                 jump 3d0
3b7: swap           0         Y=0|r2                                                                                                   AFL.EN                                  switch flags(ZM) jump (3ba, 3bb, 3ba, 3bb)
3b8: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              
3b9: swap           0         r9=0|r8  Y=0|r8                                                                           BeginRead                                              jump 2f4
3ba: swap           0         r4=0&r0  Y=0&r0                                                                                                                                  switch flags(ZM) jump (3be, 3bf, 3be, 3bf)
3bb: swap           0         r4=~(r4^r4)  Y=~(r4^r4)                                                                                                                          switch flags(ZM) jump (3be, 3bf, 3be, 3bf)
3bc: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                                                                             WorkAddr_LD_HI                                         
3bd: R[RIdx]        0         r0=D|0  Y=D|0                            WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 3b9
3be: swap           0         r2=0&r0  Y=0&r0                                                                                                                                  jump 274
3bf: swap           0         r2=~(r2^r2)  Y=~(r2^r2)                                                                                                                          jump 274
3c0: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=AFL.OVER,L=AFL.C}                            R[RIdx.L][CPL]<=RES         jump STK0
3c1: swap           0         Y=0|r7                                   AR<=F                                                                                           LSB     jump 3ad; pop
3c2: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (3c6, 3c7, 3c6, 3c7)
3c3: swap           0         Y=0|Q                                                                                                    AFL.EN                                  jump 3cb
3c4: R[RIdx]        0         r0=D|0  Y=D|0                                                                                                                                    if REG_MMIO jsr 633
3c5: swap           0         Y=0|r7                                   AR<=F                                            MemAddr_Cnt    BusCycleEnd                             jump 400|(AR & ff)
3c6: swap           0         r1=0&r0  Y=0&r0                                                                           BeginRead                                              jump 3d3
3c7: swap           0         r1=~(r1^r1)  Y=~(r1^r1)                                                                   BeginRead                                              jump 3d3
3c8: const:80       0         r7=(~D)&r7  Y=(~D)&r7                                                                                                                            
3c9: swap           0         r7=r1|r7  Y=r1|r7                                                                                                                                jump 9b
3ca: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 371
3cb: swap           0         r1=(0+r7)>>1  Y=0+r7 RAM7=ALU.C                                                                                                                  switch flags(ZM) jump (3cd, 3cd, 3cf, 3cf)
3cc: mar_hi         0         r0=D|0  Y=D|0                                                                                                        R[RIdx.L][CPL]<=RES LSB     jump 3dc
3cd: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=1,L=CCR.L}                                                                      jump 3c8
3ce: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI                                         jump 3ea
3cf: CCR            0         Q=~(D^0) Y=~(D^0)                                                                                                                                jump 3c8
3d0: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
3d1: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              if DMARequest jsr 785
3d2: bus_read       0         r1=D|0  Y=D|0                                                                             BeginRead                                              if MemFault jsr 70e
3d3: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=0                 if REG_MMIO jsr 643
3d4: swap           0         Y=r0+Q                                                                                    WorkAddr_Cnt   BusCycleEnd                             if DMARequest jsr 785
3d5: bus_read       0         r2=D|0  Y=D|0                                                                                                                                    jsr 264
3d6: swap           AFL.C     r0=r0-r0  Y=r0-r0                                                                                                                                if DMARequest jsr 785
3d7: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=0                 jump 209|(AR & f0)
3d8: swap           0         Q=0&r0 Y=0&r0                                                                                                                                    switch flags(ZM) jump (3d9, 3d9, 3db, 3db)
3d9: swap           0         r1=r1+r1  Y=r1+r1                                                                                        AFL.EN                                  jump d2
3da: swap           0         Y=r0+r3                                  RES<=F                                                          AFL.EN                                  switch flags(ZM) jump (3de, 3df, 3de, 3df)
3db: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=1,L=CCR.L}               BeginRead                                              jump STK0
3dc: const:f0       0         Y=D^r0                                   RES<=F                                                                                                  
3dd: swap           0         Y=r0+Q                                                                                                               R[RIdx.L][CPL]<=RES         jump 101
3de: swap           AFL.C     Y=0+r1                                   RES<=F                                                                      WorkAddr_LD_LO              jump 2fb
3df: swap           AFL.C     Y=r1-0                                   RES<=F                                                                      WorkAddr_LD_LO              jump 2fb
3e0: swap           0         r4=(0|r4)>>1  Y=0|r4 RAM7=ALU.S                                                                                                                  
3e1: const:c1       0         r4=((~D)&r4)>>1  Y=(~D)&r4 RAM7=ALU.S                                                                                                            
3e2: const:f8       0         r1=(~D)&r1  Y=(~D)&r1                                                                                                                            ret
3e3: R[RIdx]        0         Y=D|0                                    RES<=F                                                                      WorkAddr_LD_LO              if DMARequest jsr 785
3e4: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI                                         switch flags(ZM) jump (3e6, 3e7, 3e6, 3e7)
3e5: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=AFL.OVER,L=AFL.C}                            R[RIdx.L][CPL]<=RES         jump STK0
3e6: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                                                           jump 100
3e7: const:df       0         Y=(~D)&Q                                 WorkAddr<=RES                                                   AFL.EN                                  
3e8: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (3e9, 3e9, 3eb, 3eb)
3e9: const:fa       0         Y=~(D^0)                                 RES<=F                                                                                                  jump 105
3ea: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 280|(AR & f)
3eb: swap           0         Y=r0+Q                                                                                                                                           jump 100
3ec: const:6d       0         r3=~(D^0)  Y=~(D^0)                                                                                                                              
3ed: const:1e       0         r4=D|0  Y=D|0                                                                                            BusCycleEnd                             jsr 1e1
3ee: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 101
3ef: swap           0         Y=r0+Q                                                                                                               R[RIdx.L][CPL]<=RES LSB     jump 101
3f0: mar_hi         0         r0=D^r0  Y=D^r0                                                                                                                                  if MemFault jsr 466
3f1: mar_lo         0         r5=D|0  Y=D|0                                                                                                                                    
3f2: swap           0         r5=r1+r5  Y=r1+r5                        RES<=F                                                          AFL.EN                                  switch flags(ZM) jump (3f6, 3f7, 3f6, 3f7)
3f3: swap           0         Y=r0+Q                                                                                    BeginWrite                 Addr_U/D<=1                 
3f4: swap           0         Y=r0+Q                                                                                                                                           if RegOrPageOut jsr 66c
3f5: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                   BusCycleEnd                             jump 100
3f6: swap           AFL.C     r4=0+r0  Y=0+r0                          RES<=F                                                                      WorkAddr_LD_LO              ret
3f7: swap           AFL.C     r4=r0-0  Y=r0-0                          RES<=F                                                                      WorkAddr_LD_LO              ret
3f8: swap           AFL.C     Y=0+r0                                   RES<=F                                                          AFL.EN      R[RIdx.L][CPL]<=RES LSB     switch flags(ZM) jump (3f9, 3f9, 3fb, 3fb)
3f9: swap           0         r9=0|r3  Y=0|r3                          RIdx<=F                                                                     R[RIdx.L][CPL]<=RES         jump 3fd
3fa: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                               R[RIdx.L][CPL]<=RES         jump 100
3fb: swap           0         r9=0|r3  Y=0|r3                          RIdx<=F                                                                     R[RIdx.L][CPL]<=RES         switch flags(ZM) jump (3fd, 3fd, 3ff, 3ff)
3fc: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=0                 jump 2ce
3fd: swap           0         Y=0|r8                                   RES<=F                                                                                                  ret
3fe: swap           0         Y=r0+Q                                                                                    BeginWrite                                             jump 29d
3ff: swap           0         Y=0|r8                                   RES<=F                                                          AFL.EN                                  jump 2e7; pop
400: swap           0         r5=0&r0  Y=0&r0                                                                                                                                  jump 5b8
401: bus_read       0         Y=D|0                                    RES<=F                                           BeginRead                                              if MemFault jsr 636
402: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI                                         if REG_MMIO jsr 633
403: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
404: bus_read       0         Y=D|0                                    RES<=F                                                                                                  if MemFault jsr 466
405: swap           0         Y=r0+Q                                                                                                               WorkAddr_LD_LO              jump 3b8
406: bus_read       0         Y=D+r1                                   RES<=F                                           BeginRead      AFL.EN                                  if MemFault jsr 77e
407: swap           AFL.C     Y=r2+r0                                  RES<=F                                                          AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 3c0
408: swap           0         r2=0|r3  Y=0|r3                                                                                                                                  if DMARequest jsr 785
409: const:80       0         r9=D+r2  Y=D+r2                          RIdx<=F                                                                                                 
40a: swap           0         Y=r0+Q                                                                                                                                           jump 41c
40b: swap           0         Y=r0+Q                                                                                                                                           if MemFault jsr 6
40c: swap           0         Y=r0+Q                                                                                                                                           jsr 2|(AR & f0)
40d: swap           0         r0=0|r0  Y=r1                                                                                            AFL.EN      DataWTClock                 
40e: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=CCR.F,L=CCR.L}    BeginWrite                                             ret
40f: unused
410: bus_read       0         r2=D|0  Y=D|0                                                                             BeginRead                                              jump 363
411: swap           0         r9=0|r8  Y=0|r8                                                                           BeginRead                                              if MemFault jsr 636
412: bus_read       0         r2=D|0  Y=D|0                                                                                                                                    if REG_MMIO jsr 633
413: swap           0         r9=r5&r9  Y=r5&r9                        RIdx<=F                                          MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
414: bus_read       0         Y=D+r1                                   RES<=F                                                          AFL.EN                                  if MemFault jsr 466
415: swap           AFL.C     r0=r2+r0  Y=r2+r0                        RES<=F                                                                      WorkAddr_LD_LO      LSB     jump 3bc
416: bus_read       1         Y=D-r1                                   RES<=F                                           BeginRead      AFL.EN                                  if MemFault jsr 77e
417: swap           AFL.C     Y=r2-r0                                  RES<=F                                                          AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 3c0
418: swap           0         r0=0&r0  Y=0&r0                                                                                                                                  jump 41a
419: swap           0         Y=r0+Q                                                                                                                                           jump 4a0
41a: swap           0         r1=0&r0  Y=0&r0                                                                                                                                  jump 408
41b: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (41e, 41f, 41e, 41f)
41c: R[RIdx]        0         Q=D|0 Y=D|0                                                                                              AFL.EN                                  if DMARequest jsr 785
41d: swap           0         Y=r2-0                                                                                                   AFL.EN                                  switch flags(ZM) jump (419, 419, 41b, 41b)
41e: swap           0         r3=r2-0  Y=r2-0                                                                                                                                  jump 408; pop
41f: swap           0         Y=r7-0                                                                                                   AFL.EN                                  jump 753
420: swap           AFL.C     r4=r4+r4  Y=r4+r4                        RES<=F                                                                                                  switch flags(ZM) jump (42a, 42b, 42a, 42b)
421: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (42e, 42f, 42e, 42f)
422: bus_read       0         Y=D+r3                                   RES<=F                                                          AFL.EN                                  
423: swap           AFL.C     Y=r0+r2                                  RES<=F                                                                      WorkAddr_LD_LO              if MemFault jsr 466
424: swap           0         Q=r5&r8 Y=r5&r8                          RIdx<=F                                          WorkAddr_LD_HI                                         
425: swap           0         r9=0|Q  Y=0|Q                            WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 2b4
426: bus_read       0         Y=D&r1                                   RES<=F                                           BeginRead      AFL.EN                                  if MemFault jsr 77e
427: swap           0         Y=r2&r0                                  RES<=F                                                          AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 30e
428: const:8        0         r1=D+r1  Y=r1                            PTIdx<=F                                         WorkAddr_LD_HI                                         
429: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 438
42a: swap           0         r1=r4|r1  Y=r4|r1                                                                                                    R[RIdx]<=RES                jump 4c3
42b: swap           0         r0=r8+r0  Y=r8+r0                                                                                                                                jump 42a
42c: swap           0         r0=(0|r0)<<1 Q<<=1 Y=0|r0 Q0=0                                                                                                                   
42d: ILR?           0         r0=(~(D^0))>>1 Q>>=1 Y=~(D^0) RAM7=ALU.S WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 488
42e: swap           0         r0=0&r0  Y=0&r0                                                                                                                                  jump 430
42f: const:7f       0         r0=~(D^0)  Y=~(D^0)                                                                                                                              
430: swap           0         Y=r0&r2                                                                                                  AFL.EN                                  if REG_MMIO jsr 633
431: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             switch flags(ZM) jump (439, 439, 43b, 43b)
432: swap           0         r2=~(0^r2)  Y=~(0^r2)                                                                                                                            jump 430; pop
433: const:f5       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 
434: swap           0         Y=r0+Q                                                                                                                                   LSB     if MemFault jsr 466
435: R[RIdx.L][CPL] 0         Y=D|0                                    RES<=F                                                                                                  jump 644
436: bus_read       0         Y=D|r1                                   RES<=F                                           BeginRead      AFL.EN                                  if MemFault jsr 77e
437: swap           0         Y=r2|r0                                  RES<=F                                                          AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 30e
438:                0         Q=D|0 Y=D|0                                                                                                                                      jump 42c
439: mar_hi         0         r1=D|0  Y=D|0                                                                                                                                    if MemFault jsr 466
43a: const:f0       0         r1=D^r1  Y=D^r1                                                                                                                                  jump 43f
43b: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 101
43c: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
43d: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              jump 7e0
43e: mar_lo         0         Y=D|0                                    RES<=F                                                                                                  jump 20c
43f: bus_read       0         r0=D|0  Y=D|0                                                                                            AFL.EN                                  if DMARequest jsr 785
440: mar_lo         0         r3=D|0  Y=D|0                                                                                                                                    jump 3da
441: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
442: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
443: bus_read       0         r1=D|0  Y=D|0                                                                             BeginRead                                              if MemFault jsr 636
444: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
445: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 47e
446: bus_read       0         Y=D^r1                                   RES<=F                                           BeginRead      AFL.EN                                  if MemFault jsr 77e
447: swap           0         Y=r2^r0                                  RES<=F                                                          AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 30e
448: swap           0         r4=r4-0  Y=r4-0                                                                                          AFL.EN      PTRAM<=RES                  if DMARequest jsr 785
449: swap           0         Y=0|r3                                   PTIdx<=F                                                                                                switch flags(ZM) jump (44a, 44b, 44a, 44b)
44a: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 509
44b: const:d1       0         Y=~(D^0)                                 RIdx<=F                                                                                                 jump 2e
44c: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 63b
44d: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              jump 157
44e: const:f3       0         Y=(~D)&r4                                AR<=F                                                                                                   
44f: swap           0         Y=0|r4                                   AR<=F                                                                                                   jump 1d0|(AR & f)
450: swap           0         r5=0|r1  Y=0|r1                                                                                                                                  if DMARequest jsr 785
451: swap           0         r7=0|r2  Y=0|r2                                                                                                                                  jump 4d3
452: swap           1         Y=r2+r3                                  RES<=F                                                          AFL.EN                                  
453: swap           AFL.C     Y=0+r1                                   RES<=F                                                                      WorkAddr_LD_LO              
454: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI                                         if DMARequest jsr 785
455: swap           0         Y=0&r0                                   WorkAddr<=RES                                                   AFL.EN                                  ret
456: bus_read       0         Y=D|0                                    RES<=F                                           BeginRead      AFL.EN                                  if MemFault jsr 77e
457: swap           0         Y=0|r2                                   RES<=F                                                          AFL.EN      R[RIdx.L][CPL]<=RES LSB     jump 30e
458: bus_read       0         r1=D|0  Y=D|0                                                                                                                                    if MemFault jsr 626
459: swap           0         r3=(0|r3)>>1  Y=0|r3 RAM7=ALU.S                                                                                                                  jump 508|(AR & f0)
45a: const:d1       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                         BusCycleEnd                             jump 62e
45b: swap           0         r3=(0|r3)>>1  Y=0|r3 RAM7=ALU.S                                                                                                                  if REG_MMIO jsr 643
45c: swap           0         r3=(0|r3)>>1  Y=0|r3 RAM7=ALU.S          WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              jump 458
45d: swap           0         r3=(0|r6)>>1  Y=0|r6 RAM7=ALU.S                                                                                                                  switch flags(ZM) jump (45a, 45b, 45a, 45b)
45e: const:f3       0         Y=(~D)&r4                                AR<=F                                                                                                   
45f: swap           0         r4=0|Q  Y=0|Q                                                                                                                                    jump 1d0|(AR & f)
460: swap           0         r6=(~r1)&r6  Y=(~r1)&r6                                                                                                                          if DMARequest jsr 785
461: swap           0         r6=r0|r6  Y=r0|r6                                                                                                                        LSB     
462: R[RIdx.L][CPL] 0         Y=D|0                                    RES<=F                                                                                                  
463: R[RIdx]        0         Y=D|0                                    RES<=F                                                                      WorkAddr_LD_LO              
464: swap           0         Y=0|r3                                   PTIdx<=F                                         WorkAddr_LD_HI                                         
465: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                                                           jump 100
466: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 667
467: swap           0         Y=r0+Q                                                                                                               WorkAddr_LD_LO              jump 465
468: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=1,L=CCR.L}                                                                      
469: CCR            0         Q=~(D^0) Y=~(D^0)                                                                                                                                if DMARequest jsr 785
46a: const:f1       0         Y=~(D^0)                                 RIdx<=F                                                                                                 
46b: swap           0         Y=0|r6                                   CCR<={V=AFL.Z,M=AFL.S,F=CCR.F,L=CCR.L}                          AFL.EN                          LSB     
46c: R[RIdx.L][CPL] 0         Y=D|0                                    RES<=F                                                                      Addr_U/D<=1                 jump 3e3
46d: swap           0         r4=r4+r4  Y=r4+r4                                                                                                                                jump 49e
46e: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 63b
46f: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
470: bus_read       0         r0=D|0  Y=D|0                                                                             BeginRead                                              if MemFault jsr 7ae
471: swap           0         Y=0|r4                                                                                                   AFL.EN                                  if REG_MMIO jsr 63b
472: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             jsr 20a|(AR & f0)
473: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=0                 if RegOrPageOut jsr 66c
474: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
475: swap           0         Y=0|r0                                   RES<=F                                                                      DataWTClock                 jump 3f3
476: bus_read       0         r3=D|0  Y=D|0                                                                                                                                    if MemFault jsr 78e
477: swap           0         r4=0&r0  Y=0&r0                                                                                                                                  jsr fe
478: swap           0         r8=0|Q  Y=0|Q                                                                                                                                    jsr f0
479: swap           0         r7=0|Q  Y=0|Q                                                                                                                                    jump 2c7
47a: swap           0         r5=0&r0  Y=0&r0                                                                                                                                  jsr 4ef
47b: const:80       0         r9=D+r3  Y=D+r3                          WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              
47c: swap           0         r4=0|r3  Y=0|r3                                                                           BeginRead                                              jsr 10
47d: swap           1         r8=0+r8  Y=0+r8                          WorkAddr<=RES                                                                                           jump 418
47e: bus_read       0         r2=D|0  Y=D|0                                                                                                                                    if MemFault jsr 466
47f: swap           0         Y=0&r0                                                                                                   AFL.EN                                  ret
480: R[RIdx.L][CPL] 0         Y=D|0                                    CPL<=F                                                                      R[RIdx.L][CPL]<=RES LSB     jump 484
481: swap           0         Q=0&r0 Y=0&r0                                                                                                                                    jump 3d9
482: swap           0         Y=0&r0                                   RES<=F                                                                                                  jump 105
483: swap           0         Y=0|r2                                                                                                   AFL.EN                                  jump 3d8
484: swap           0         Y=0|r9                                   RIdx<=F                                                                                         LSB     
485: R[RIdx]        0         r3=D|0  Y=D|0                            RES<=F                                           Swap                                                   jump 490
486: bus_read       0         r3=D|0  Y=D|0                                                                                            AFL.EN                                  if MemFault jsr 78e
487: swap           0         r4=0&r0  Y=0&r0                                                                           Swap                                                   switch flags(ZM) jump (481, 481, 483, 483)
488: swap           0         Y=0|Q                                    RES<=F                                                                      DataWTClock                 
489: swap           0         Y=0|r3                                   PTIdx<=F                                                                                                switch flags(ZM) jump (48a, 48b, 48a, 48b)
48a: swap           0         Y=r0+Q                                                                                    BeginWrite                                             jump 4c0
48b: const:e1       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                          BeginWrite                                             jump 51e
48c: const:c        0         Y=D&r4                                   AR<=F                                                                                                   
48d: swap           0         Y=0|r4                                   AR<=F                                                                                                   jump 590|(AR & f)
48e: const:f0       0         r0=~(D^0)  Y=~(D^0)                                                                                                                              
48f: mar_lo         0         Y=D|0                                    RES<=F                                                                                                  jump 4eb
490: swap           0         Y=r0+Q                                   CCR<={V=RES.D7,M=RES.D6,F=RES.D5,L=RES.D4}                                                              
491: swap           0         r0=D&r1  Y=D&r1                                                                                                                                  jump 460
492: const:f1       0         r9=(~D)&r4  Y=(~D)&r4                    RIdx<=F                                          BeginRead                                              
493: swap           0         Y=r0+Q                                                                                                                                   LSB     if REG_MMIO jsr 633
494: R[RIdx]        0         r3=D|0  Y=D|0                                                                             MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
495: bus_read       0         r0=D|0  Y=D|0                            RES<=F                                           BeginRead                                              if MemFault jsr 636
496: R[RIdx]        0         r2=D|0  Y=D|0                                                                             WorkAddr_LD_HI                                         if REG_MMIO jsr 633
497: swap           0         Y=0|r4                                   RIdx<=F                                                                                                 jump 147
498: bus_read       0         r2=D|0  Y=D|0                            RIdx<=F                                                                                                 if MemFault jsr 466
499: swap           1         Y=0+r2                                   RIdx<=F                                                                     R[RIdx]<=RES                jump 5cd
49a: const:fc       0         Q=(~D)&r4 Y=(~D)&r4                                                                                                                              
49b: const:fd       0         Y=~(D^Q)                                                                                                 AFL.EN                                  
49c: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (49d, 49d, 49f, 49f)
49d: swap           0         Y=0&r0                                                                                                   AFL.EN                                  ret
49e: swap           0         r5=0|r1  Y=0|r1                                                                                                                                  jump 4a9
49f: swap           0         Y=~(r0^r0)                                                                                               AFL.EN                                  jump 450
4a0: swap           0         r0=(0|r0)<<1 Q<<=1 Y=0|r0 Q0=0                                                                                                                   jsr 4ce
4a1: swap           AFL.C     r4=r4+r4  Y=r4+r4                                                                                                                                push 4a2; switch flags(ZM) jump (4ce, 4cf, 4ce, 4cf)
4a2: swap           AFL.C     r4=r4+r4  Y=r4+r4                                                                                                                                push 4a3; switch flags(ZM) jump (4ce, 4cf, 4ce, 4cf)
4a3: swap           AFL.C     r4=r4+r4  Y=r4+r4                                                                                                                                push 4a4; switch flags(ZM) jump (4ce, 4cf, 4ce, 4cf)
4a4: swap           AFL.C     r4=r4+r4  Y=r4+r4                                                                                                                                if DMARequest jsr 785
4a5: swap           0         Y=r0+Q                                                                                                                                           push 4a6; switch flags(ZM) jump (4ce, 4cf, 4ce, 4cf)
4a6: swap           AFL.C     r4=r4+r4  Y=r4+r4                                                                                                                                push 4a7; switch flags(ZM) jump (4ce, 4cf, 4ce, 4cf)
4a7: swap           AFL.C     r4=r4+r4  Y=r4+r4                                                                                                                                push 4a8; switch flags(ZM) jump (4ce, 4cf, 4ce, 4cf)
4a8: swap           AFL.C     r4=r4+r4  Y=r4+r4                                                                                                                                switch flags(ZM) jump (4aa, 4ab, 4aa, 4ab)
4a9: swap           0         r7=0|r2  Y=0|r2                                                                                                                                  jump 563
4aa: swap           1         r0=r0-r8  Y=r0-r8                                                                                        AFL.EN                                  jump 420
4ab: swap           0         r0=r8+r0  Y=r8+r0                                                                                        AFL.EN                                  jump 420
4ac: unused
4ad: unused
4ae: const:80       0         r0=~(D^0)  Y=~(D^0)                                                                                                                              
4af: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
4b0: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
4b1: bus_read       0         r0=D&r0  Y=D&r0                                                                                                                                  if MemFault jsr 74e
4b2: const:cf       1         Y=D+r0                                                                                                   AFL.EN                                  
4b3: swap           0         r5=0|r3  Y=0|r3                                                                                                                                  switch flags(ZM) jump (4b6, 4b7, 4b6, 4b7)
4b4: R[RIdx]        0         Y=D|0                                    RES<=F                                                                      WorkAddr_LD_LO              if DMARequest jsr 785
4b5: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI                                         jump 3e6
4b6: const:b7       1         Y=D+r0                                                                                                   AFL.EN                                  jump 4b8
4b7: swap           0         Y=r0+Q                                                                                                                                           jump 468
4b8: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (4ba, 4bb, 4ba, 4bb)
4b9: swap           0         r2=r2-0  Y=r2-0                                                                                          AFL.EN                                  jump 514
4ba: swap           0         Y=r0+Q                                                                                                                                           jump 468
4bb: const:c5       1         Y=D+r0                                                                                                   AFL.EN                                  
4bc: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (4be, 4bf, 4be, 4bf)
4bd: R[RIdx.L][CPL] 0         Y=D|0                                    RES<=F                                                                                                  jump 4b4
4be: const:41       1         Y=r0-D                                                                                                   AFL.EN                                  jump 5be
4bf: const:f        0         r4=D&r0  Y=D&r0                                                                                                                                  jump 5f0
4c0: swap           0         Y=r0+Q                                                                                                                                           if RegOrPageOut jsr 5cc
4c1: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
4c2: swap           0         r4=r4-0  Y=r1                            RES<=F                                                          AFL.EN                                  jump 428
4c3: swap           0         r2=r2-0  Y=r2-0                                                                                          AFL.EN                                  if DMARequest jsr 785
4c4: const:80       0         r9=D+r2  Y=D+r2                          RIdx<=F                                                                                                 
4c5: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (4c6, 4c7, 4c6, 4c7)
4c6: R[RIdx]        0         Q=D|0 Y=D|0                                                                                                                                      jump 4a0
4c7: const:f5       1         Y=D+r0                                                                                                   AFL.EN                                  
4c8: swap           0         Y=r0+Q                                                                                                                                           push 4c9; switch flags(ZM) jump (4ca, 4cb, 4ca, 4cb)
4c9: swap           0         Y=r0+Q                                                                                                                                           jump 75c
4ca: const:48       0         r0=r0-D  Y=r0-D                                                                                                                                  ret
4cb: const:4f       0         r0=r0-D  Y=r0-D                                                                                                                                  ret
4cc: const:c        0         Y=D&r4                                   AR<=F                                                                                                   
4cd: swap           0         r4=0|Q  Y=0|Q                            AR<=F                                                                                                   jump 590|(AR & f)
4ce: swap           1         r0=(r0-r8)<<1 Q<<=1 Y=r0-r8 Q0=AFL.C     CCR<={V=CCR.V,M=CCR.M,F=1,L=CCR.L}                              AFL.EN                                  ret
4cf: swap           0         r0=(r8+r0)<<1 Q<<=1 Y=r8+r0 Q0=0         CCR<={V=CCR.V,M=CCR.M,F=1,L=CCR.L}                              AFL.EN                                  ret
4d0: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
4d1: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             switch flags(ZM) jump (4d2, 4d3, 4d2, 4d3)
4d2: bus_read       0         Y=r0+Q                                                                                    Swap                                                   jump 4d5
4d3: bus_read       0         r9=D&r0  Y=D&r0                          RIdx<=F                                                                                                 if DMARequest jsr 785
4d4: swap           0         Y=r0+Q                                                                                                                                           jump 4d6
4d5: swap           0         r9=D&r0  Y=D&r0                          RIdx<=F                                                                                                 if DMARequest jsr 785
4d6: swap           0         Y=r0+Q                                                                                                                                           if RegIdx & 1 jsr 482
4d7: swap           0         Y=r0+Q                                                                                                                                   LSB     if MemFault jsr 466
4d8: R[RIdx.L][CPL] 0         r2=D|0  Y=D|0                                                                                                                                    switch flags(ZM) jump (4de, 4df, 4de, 4df)
4d9: swap           AFL.C     r5=0+r5  Y=0+r5                          RES<=F                                                                      WorkAddr_LD_LO              
4da: swap           0         r2=r3+r2  Y=r3+r2                        RES<=F                                           WorkAddr_LD_HI AFL.EN                                  
4db: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                                                           
4dc: swap           AFL.C     r1=0+r1  Y=0+r1                          RES<=F                                                                      WorkAddr_LD_LO              
4dd: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI                                         ret
4de: R[RIdx]        0         r1=D|0  Y=D|0                                                                                                                                    jump 49a
4df: R[RIdx]        0         r1=D|0  Y=D|0                                                                                                                                    ret
4e0: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                            CCR<={V=CCR.V,M=CCR.M,F=0,L=CCR.L}               BeginRead                                              
4e1: R[RIdx]        0         r4=D|0  Y=D|0                                                                                                                                    if REG_MMIO jsr 643
4e2: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             if DMARequest jsr 785
4e3: bus_read       0         r0=D&r1  Y=D&r1                                                                                                                                  if MemFault jsr 73e
4e4: swap           0         Y=r0+r7                                  RES<=F                                                          AFL.EN                                  jump 750
4e5: swap           0         Y=r0+Q                                                                                    WorkAddr_Cnt                                           if REG_MMIO jsr 643
4e6: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              if DMARequest jsr 785
4e7: bus_read       0         r2=D|r2  Y=D|r2                                                                                                                                  if MemFault jsr 626
4e8: bus_read       0         Y=D|0                                    RES<=F                                                                      DataWTClock                 jump 63c
4e9: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                                                                                                                                    jump 3c4
4ea: const:f1       0         Y=~(D^0)                                 RIdx<=F                                                                                                 
4eb: mar_hi         0         r0=~(D^r0)  Y=~(D^r0)                    RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     
4ec: swap           0         Y=r0+Q                                                                                                               R[RIdx.L][CPL]<=RES         ret
4ed: R[RIdx]        0         r7=D|0  Y=r7                             RES<=F                                                                                                  
4ee: swap           0         Y=0|r5                                   RES<=F                                                                      WorkAddr_LD_LO              
4ef: swap           0         Y=0|r2                                   RES<=F                                           WorkAddr_LD_HI                                         
4f0: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                                                           if DMARequest jsr 785
4f1: swap           0         Y=0|r1                                   RES<=F                                                                      WorkAddr_LD_LO              
4f2: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI                                         ret
4f3: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
4f4: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              if DMARequest jsr 785
4f5: bus_read       0         r0=D|0  Y=D|0                                                                             BeginRead                                              if MemFault jsr 70e
4f6: swap           0         r3=r3-0  Y=r3-0                                                                           WorkAddr_Cnt   AFL.EN                                  if REG_MMIO jsr 643
4f7: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              jump 5ec
4f8: swap           0         r3=r3-0  Y=r3-0                                                                                          AFL.EN                                  switch flags(ZM) jump (4f9, 4f9, 4fb, 4fb)
4f9: swap           0         Y=r0+Q                                                                                                                                           if RegOrPageOut jsr 5cc
4fa: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              switch flags(ZM) jump (4fd, 4fd, 4ff, 4ff)
4fb: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=0                 if RegOrPageOut jsr 5cc
4fc: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              jump 728
4fd: swap           0         Y=r0+Q                                                                                    WorkAddr_Cnt                                           
4fe: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump b
4ff: mar_lo         0         Y=D|0                                    RES<=F                                           WorkAddr_Cnt                                           jump 1d1
500: ILR?           0         r0=~(D^0)  Y=~(D^0)                                                                                                                              jump 7b2
501: R[RIdx]        1         Y=D+r5                                   RES<=F                                           BeginRead      AFL.EN                                  jump 261
502: swap           0         Y=0|r1                                   RES<=F                                                                                                  if REG_MMIO jsr 643
503: const:8        0         r1=D+r1  Y=r1                            PTIdx<=F                                         WorkAddr_LD_HI BusCycleEnd                             jump 507
504: swap           0         Y=r0+Q                                                                                                               INT_ENABLE<=1               jump 101
505: swap           0         Y=r0+Q                                                                                                               INT_ENABLE<=0               jump 101
506: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 448
507: bus_read       0         Y=D|0                                    RES<=F                                           MemAddr_Cnt                                            if MemFault jsr 1f6 else jump 506
508: swap           0         r4=(0|r1)>>1  Y=0|r1 RAM7=ALU.S                                                                                                                  jsr 3e0
509: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 502
50a: const:c1       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 jump 43e
50b: R[RIdx]        0         r4=D|0  Y=D|0                                                                                                        WorkAddr_LD_LO              if DMARequest jsr 785
50c: const:71       0         Y=~(D^0)                                 RIdx<=F                                                                                                 jsr 48e
50d: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    Swap                                                   jump 7fe
50e: swap           0         Y=r0+Q                                                                                                                                           jump 3ec
50f: const:51       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 jump 2ae
510: R[RIdx]        0         r14=D|0  Y=D|0                                                                                                                                   jump 550
511: R[RIdx]        0         Y=D-r5                                   RES<=F                                           BeginRead      AFL.EN                                  jump 261
512: swap           0         r9=0|r0  Y=0|r0                          RIdx<=F                                          BeginRead                                              jump 5b
513: swap           0         r8=r8-0  Y=r8-0                                                                                          AFL.EN      R[RIdx]<=RES                jump 65e
514: swap           1         r7=0+r7  Y=0+r7                          RIdx<=F                                                                                                 switch flags(ZM) jump (512, 513, 512, 513)
515: const:7f       0         r9=r3-D  Y=r3-D                          RIdx<=F                                                                                                 jsr 580
516: swap           0         Y=0&r0                                   RES<=F                                                                                                  jsr 523
517: swap           0         Y=r0+Q                                                                                                                                           jump 8|(AR & f0)
518: swap           0         r4=(0|r1)>>1  Y=0|r1 RAM7=ALU.S                                                                                                                  jsr 3e0
519: swap           0         r4=r4-0  Y=r1                            RES<=F                                                          AFL.EN                                  jump 428
51a: swap           0         Y=~(r0^r0)                                                                                               AFL.EN                                  jsr 4cc
51b: mar_lo         0         Y=D|0                                    RES<=F                                                                                                  jsr 4ea
51c: swap           0         Y=0|r7                                   RES<=F                                                                                                  jsr 4ee
51d: swap           0         r2=0&r0  Y=0&r0                          RES<=F                                                                                                  jump a|(AR & f0)
51e: swap           0         Y=r0+Q                                                                                                                                           if RegOrPageOut jsr 5cc
51f: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             if DMARequest jsr 785
520: swap           0         Y=r0+Q                                                                                                                                   LSB     jump 4bd
521: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=0,L=0}                   BeginRead                  R[RIdx.L][CPL]<=RES         jump STK0
522: swap           0         Y=0&r0                                   RES<=F                                                                                                  
523: const:ef       0         r4=~(D^0)  Y=~(D^0)                                                                                                                              
524: const:7f       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 
525: swap           0         r4=r4-0  Y=r4-0                                                                                          AFL.EN      R[RIdx]<=RES                if DMARequest jsr 785
526: swap           1         r9=0+r9  Y=0+r9                          RIdx<=F                                                                                                 switch flags(ZM) jump (525, 525, 527, 527)
527: swap           0         Y=r0+Q                                                                                                                                           ret
528: swap           0         r4=0&r0  Y=0&r0                                                                                                                                  jump 509
529: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
52a: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              if DMARequest jsr 785
52b: swap           0         Y=r0+Q                                                                                    BeginRead                                              if MemFault jsr 70e
52c: bus_read       0         r1=D|0  Y=D|0                                                                             WorkAddr_Cnt                                           if REG_MMIO jsr 643
52d: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             jump 55a
52e: swap           0         r3=0&r0  Y=0&r0                                                                                                                                  jump 5f7
52f: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
530: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 24b
531: R[RIdx]        0         Y=r5-D                                   RES<=F                                           BeginRead      AFL.EN                                  switch flags(ZM) jump (535, 535, 537, 537)
532: bus_read       0         r4=D|0  Y=D|0                                                                             BeginRead                                              if MemFault jsr 1be
533: bus_read       0         r7=D+r7  Y=D+r7                                                                                                                                  if REG_MMIO jsr 643
534: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 5b0
535: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=AFL.OVER,L=AFL.C}                                   R[RIdx.L][CPL]<=RES         jump STK0
536: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 529
537: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=CCR.F,L=CCR.L}                                      R[RIdx.L][CPL]<=RES         jump STK0
538: swap           0         r4=0&r0  Y=0&r0                                                                                                                                  jump 519
539: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=CCR.F,L=CCR.L}                                                                  
53a: swap           0         Y=r0+Q                                                                                                                                           jump 5e4
53b: swap           0         r3=r3-0  Y=r3-0                                                                                          AFL.EN                                  if RegOrPageOut jsr 5cc
53c: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              switch flags(ZM) jump (53d, 53d, 53f, 53f)
53d: swap           0         Y=r0+Q                                                                                    WorkAddr_Cnt                                           jump 536
53e: swap           0         r2=r1|r2  Y=r1|r2                                                                         BeginWrite                                             jump 53b
53f: swap           0         Y=0|r2                                                                                                   AFL.EN                                  jump 539
540: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 570
541: R[RIdx]        0         r1=(D|0)>>1 Q>>=1 Y=D|0 RAM7=ALU.S                                                                                                               switch flags(ZM) jump (545, 545, 547, 547)
542: bus_read       0         r4=D|0  Y=D|0                                                                             BeginRead                                              if MemFault jsr 1be
543: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=0                 if REG_MMIO jsr 643
544: swap           0         r8=0|r2  Y=0|r2                                                                           MemAddr_Cnt    BusCycleEnd                             jump 5a4
545: swap           0         r5=r5-0  Y=r5-0                                                                                          AFL.EN                                  if DMARequest jsr 785
546: swap           0         r1=(0|r1)>>1 Q>>=1 Y=0|r1 RAM7=ALU.S                                                                                                             switch flags(ZM) jump (545, 545, 547, 547)
547: const:80       0         r15=D+Q  Y=r1                            RES<=F                                                          AFL.EN                                  jump 27f
548: const:e0       0         r4=~(D^0)  Y=~(D^0)                                                                       BeginRead                                              
549: swap           0         Y=0|r1                                   RES<=F                                                                                                  if REG_MMIO jsr 643
54a: const:8        0         r1=D+r1  Y=r1                            PTIdx<=F                                         WorkAddr_LD_HI BusCycleEnd                             
54b: bus_read       0         r0=D|0  Y=D|0                            RES<=F                                           MemAddr_Cnt                                            if MemFault jsr 1f6
54c: const:fd       0         Y=D^r0                                   WorkAddr<=RES                                    WorkAddr_LD_HI AFL.EN      WorkAddr_LD_LO              
54d: swap           0         Y=0|r3                                   PTIdx<=F                                                                    PTRAM<=RES                  if DMARequest jsr 785
54e: swap           0         r4=r4-0  Y=r4-0                          WorkAddr<=RES                                    WorkAddr_LD_HI AFL.EN      WorkAddr_LD_LO              switch flags(ZM) jump (c1, c1, c3, c3)
54f: unused
550: swap           AFL.C     Y=r14+r14                                RES<=F                                                          AFL.EN                                  jump 76
551: R[RIdx]        0         r0=D|0  Y=D|0                            CCR<={V=CCR.V,M=CCR.M,F=0,L=CCR.L}                                                                      
552: swap           0         r0=r0+r0  Y=r0+r0                        RES<=F                                                          AFL.EN                                  switch flags(ZM) jump (555, 555, 557, 557)
553: swap           0         Y=0|r4                                   RES<=F                                                                      WorkAddr_LD_LO              if DMARequest jsr 785
554: swap           0         Y=0|r2                                                                                                   AFL.EN      R[RIdx.L][CPL]<=RES         jump 5ae
555: swap           0         Y=r0+Q                                                                                                                                           if DMARequest jsr 785
556: swap           0         r5=r5-0  Y=r5-0                                                                                          AFL.EN                                  switch flags(VH) jump (559, 559, 55b, 55b)
557: swap           0         Y=r0+Q                                                                                    BeginRead                  R[RIdx.L][CPL]<=RES         switch flags(VH) jump (55d, 55d, 55f, 55f)
558: const:d1       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 jump 62e
559: swap           0         r0=r0+r0  Y=r0+r0                        RES<=F                                                          AFL.EN                                  switch flags(ZM) jump (555, 555, 557, 557)
55a: swap           0         Y=r0+Q                                                                                                                                           if MemFault jsr 626 else jump 606|(AR & f0)
55b: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=1,L=CCR.L}                                                                      jump 559
55c: swap           0         Y=r0+Q                                                                                    BeginWrite                                             jump 592
55d: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=CCR.F,L=AFL.C}                                                                  jump STK0
55e: unused
55f: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=1,L=AFL.C}                                                                      jump STK0
560: R[RIdx]        0         r14=D^r1  Y=D^r1                                                                                                                                 jump 58a
561: const:80       0         r4=D|0  Y=D|0                                                                                                                                    
562: R[RIdx]        0         r1=D|0  Y=D|0                                                                                                                                    switch flags(IL) jump (567, 567, 56f, 56f)
563: swap           0         Y=~(r0^r0)                                                                                               AFL.EN                                  jsr 4cc
564: mar_lo         0         Y=D|0                                    RES<=F                                                                                                  jsr 4ea
565: swap           0         Y=0|r7                                   RES<=F                                                                                                  jsr 4ee
566: swap           0         Y=~(0^r4)                                                                                 BeginRead      AFL.EN                                  jump 45d
567: swap           0         Y=r0-r0                                                                                                  AFL.EN                                  jump 27e
568: const:d1       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 jump 62e
569: swap           0         Y=r9+r4                                  RIdx<=F                                                                                                 jump 56c
56a: const:8        0         r6=D^r6  Y=D^r6                                                                                                                                  
56b: swap           1         r9=0+r9  Y=r9                            RIdx<=F                                                                                                 jump 59d
56c: swap           0         Y=r0+Q                                                                                                                                           
56d: R[RIdx]        0         Y=~(D^0)                                                                                                 AFL.EN                                  if DMARequest jsr 785
56e: swap           0         r5=0&r0  Y=0&r0                                                                                                                                  switch flags(ZM) jump (56a, 56b, 56a, 56b)
56f: swap           1         Y=r0-r0                                                                                                  AFL.EN                                  jump 27e
570: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 5f4
571: R[RIdx]        0         r0=D|0  Y=D|0                            CCR<={V=CCR.V,M=CCR.M,F=0,L=CCR.L}                                                                      
572: swap           0         Y=r0+Q                                                                                                                                           switch flags(IL) jump (577, 577, 57f, 57f)
573: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=CCR.F,L=CCR.L}           BeginRead                  R[RIdx.L][CPL]<=RES         jump STK0
574: swap           AFL.C     Y=r4+r0                                  RES<=F                                                                                                  if DMARequest jsr 785
575: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI                                         jump 540
576: swap           0         Y=r0+Q                                                                                                               MemFault_EN<=1              jump 101
577: swap           0         Y=r1-r1                                                                                                  AFL.EN                                  jump 57c
578: const:d1       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 jump 62e
579: swap           0         r5=r5-0  Y=r5-0                          CCR<={V=CCR.V,M=CCR.M,F=CCR.F,L=AFL.C}                          AFL.EN                                  ret
57a: swap           0         Q=r1|Q Y=r1|Q                                                                             BeginWrite                 Addr_U/D<=0                 jump 1f0
57b: swap           0         r5=r5-0  Y=r5-0                          CCR<={V=CCR.V,M=CCR.M,F=1,L=AFL.C}                              AFL.EN                                  ret
57c: swap           AFL.C     r0=r0+r0  Y=r0+r0                                                                                        AFL.EN                                  if DMARequest jsr 785
57d: swap           0         Y=r0+Q                                                                                                                                           push 57e; switch flags(VH) jump (579, 579, 57b, 57b)
57e: swap           0         Y=0|r0                                   RES<=F                                                          AFL.EN                                  switch flags(ZM) jump (572, 573, 572, 573)
57f: swap           1         Y=r1-r1                                                                                                  AFL.EN                                  jump 57c
580: swap           0         Q=0&r0 Y=0&r0                            WorkAddr<=RES                                                                                           jump 58e
581: swap           0         r4=r4-0  Y=r4-0                                                                                          AFL.EN                                  if RegOrPageOut jsr 5cc
582: swap           0         r9=r9-0  Y=r9-0                          RIdx<=F                                          MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
583: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (58e, 58f, 58e, 58f)
584: R[RIdx]        0         Q=D|Q Y=D|Q                                                                               BeginWrite                                             jump 581
585: swap           0         Y=r0+Q                                                                                                                                           jump 1e8
586: swap           0         Y=r0+Q                                                                                                               MemFault_EN<=0              jump 101
587: bus_read       0         Y=D^r2                                                                                                   AFL.EN                                  if MemFault jsr 74e
588: bus_read       0         r2=D|0  Y=D|0                                                                                                                                    switch flags(ZM) jump (589, 589, 58b, 58b)
589: swap           0         r7=0|r2  Y=0|r2                                                                           BeginRead                                              jump d0
58a: swap           1         Y=0-r5                                                                                                   AFL.EN                                  jump 58d
58b: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=CCR.F,L=1}                                                                      
58c: swap           0         Y=r0+Q                                                                                                                                           jump 86
58d: R[RIdx]        AFL.C     Y=D+r14                                  RES<=F                                                          AFL.EN                                  jump 591
58e: R[RIdx]        0         Y=D|0                                    RES<=F                                                                      DataWTClock                 jump 584
58f: swap           0         Y=0|Q                                                                                                    AFL.EN                                  ret
590: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 441
591: swap           AFL.C     r5=r5-r5  Y=r5-r5                                                                                                    R[RIdx]<=RES                jump 38
592: swap           0         r3=r3-0  Y=r3-0                                                                                          AFL.EN                                  if RegOrPageOut jsr 5cc
593: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              switch flags(ZM) jump (595, 595, 597, 597)
594: swap           0         Y=r0+Q                                                                                                                                           jump 1d4
595: swap           0         Y=r0+Q                                                                                    WorkAddr_Cnt                                           jump 5a9
596: swap           0         Y=r0+Q                                                                                                               ParitySel<=0                jump 101
597: swap           0         Y=r0+Q                                                                                                                                           jump 8b
598: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 4d0
599: unused
59a: swap           AFL.C     r5=r5-r5  Y=r5-r5                                                                                                    R[RIdx]<=RES                if DMARequest jsr 785
59b: swap           0         r4=r4-0  Y=r4-0                                                                                          AFL.EN                                  jump 56b
59c: swap           0         Y=r0+Q                                                                                                                                           jump 105
59d: swap           1         Y=0-r5                                                                                                   AFL.EN                                  switch flags(ZM) jump (59e, 59f, 59e, 59f)
59e: R[RIdx]        AFL.C     Y=0-D                                    RES<=F                                                          AFL.EN                                  jump 59a
59f: swap           0         Y=0|r4                                                                                                   AFL.EN                                  ret
5a0: swap           0         Y=r0+Q                                                                                    BeginWrite                                             jump 1a8
5a1: const:1        0         Y=D&r3                                                                                                   AFL.EN                                  
5a2: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (5ad, 5ad, 5af, 5af)
5a3: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (5a9, 5a9, 5ab, 5ab)
5a4: swap           0         Y=0|r2                                                                                                   AFL.EN      Addr_U/D<=1                 if MemFault jsr 72e
5a5: bus_read       0         r5=D|0  Y=D|0                                                                                                                            LSB     switch flags(ZM) jump (5c0, 5c1, 5c2, 5c3)
5a6: swap           0         Y=r0+Q                                                                                                               ParitySel<=1                jump 101
5a7: const:7f       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 
5a8: swap           0         Y=r0+Q                                                                                                                                           jump 510
5a9: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 10b
5aa: swap           0         r2=r2-0  Y=r2-0                                                                                          AFL.EN                                  jump 19e
5ab: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=CCR.F,L=CCR.L}                                                                  
5ac: swap           0         Y=r0+Q                                                                                                                                           jump 8b
5ad: const:5e       0         r9=D|0  Y=D|0                            RIdx<=F                                                                                                 jump a1
5ae: swap           0         Y=0|r3                                                                                    WorkAddr_LD_HI AFL.EN                                  switch flags(ZM) jump (5a1, 5a1, 5a3, 5a3)
5af: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 5b4
5b0: bus_read       0         Y=D+r1                                   RES<=F                                                          AFL.EN                                  if MemFault jsr 74e
5b1: bus_read       0         r7=D+r7  Y=D+r7                                                                                                      WorkAddr_LD_LO              jump 574
5b2: const:f0       0         r0=(~D)&r0  Y=(~D)&r0                                                                                                                            jump 5bf
5b3: swap           0         Y=r0+Q                                                                                                                                           jump 468
5b4: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
5b5: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 532
5b6: const:ef       0         Y=~(D^0)                                 RIdx<=F                                                                                                 
5b7: swap           0         Y=~(r0^r0)                               RES<=F                                                                                                  jump 736
5b8: const:f7       0         r2=~(D^0)  Y=~(D^0)                                                                       BeginRead                                              
5b9: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
5ba: swap           0         r4=0|r8  Y=0|r8                                                                                          BusCycleEnd                             
5bb: bus_read       0         r14=D|0  Y=D|0                                                                                                                                   if MemFault jsr 73e
5bc: swap           0         Q=r14+r14 Y=r14+r14                                                                                      AFL.EN                                  jump 5a7
5bd: mar_hi         0         r14=D|0  Y=D|0                           WorkAddr<=RES                                                                                           jump 5d0
5be: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (5b2, 5b3, 5b2, 5b3)
5bf: const:9        0         r4=D+r0  Y=D+r0                                                                                                                                  jump 5f0
5c0: R[RIdx.L][CPL] 0         r5=D+r5  Y=D+r5                                                                                          AFL.EN                                  jump 4e
5c1: R[RIdx.L][CPL] 1         r5=r5-D  Y=r5-D                                                                                          AFL.EN                                  jump 5c
5c2: swap           0         Y=0|r4                                   RES<=F                                                                      DataWTClock                 jump cd
5c3: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                                                           jump 1c5
5c4: mar_lo         0         Y=D|0                                    RIdx<=F                                                         BUS_DELAY                               switch pagetable??? jump (5ca, 5cb, 5ca, 5cb)
5c5: swap           0         Y=r0+Q                                                                                    BeginWrite                                             jump 5c8
5c6: const:ef       0         Y=~(D^0)                                 RIdx<=F                                                                                                 
5c7: swap           0         Y=0&r0                                   RES<=F                                                                                                  jump 736
5c8: swap           0         Y=r0+Q                                                                                                                                           if RegOrPageOut jsr 66c
5c9: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              jump 100
5ca: const:3b       0         Y=~(D^0)                                 RIdx<=F                                                         BusCycleEnd                             jump 1c4
5cb: swap           0         Y=0|r9                                   RIdx<=F                                                                     R[RIdx]<=RES                jump 6fd
5cc: mar_lo         0         Y=D|0                                    RIdx<=F                                                         BUS_DELAY                               switch pagetable??? jump (5ce, 5cf, 5ce, 5cf)
5cd: swap           0         Y=0|r1                                   RES<=F                                           BeginRead                                              jump 377
5ce: const:11       0         Y=~(D^0)                                 RIdx<=F                                                         BusCycleEnd                             jump 5ef
5cf: swap           0         Y=0|r9                                   RIdx<=F                                                                     R[RIdx]<=RES                jump 6fd
5d0: mar_hi         0         r12=D|0  Y=r12                           RES<=F                                                                      WorkAddr_LD_LO              jump 5e0
5d1: unused
5d2: unused
5d3: unused
5d4: swap           0         Y=0&r0                                   RIdx<=F                                                                                                 jsr 48e
5d5: const:11       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 jump 5ee
5d6: swap           1         Y=0-r1                                                                                                   AFL.EN                                  switch flags(ZM) jump (5de, 5df, 5de, 5df)
5d7: R[RIdx]        0         Y=D|0                                    RES<=F                                                                                                  if REG_MMIO jsr 633
5d8: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 498
5d9: swap           0         r7=r7-0  Y=r7-0                                                                                          AFL.EN                                  if RegOrPageOut jsr 5cc
5da: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
5db: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (5, 5, 7, 7)|(STK0 & ff0)
5dc: const:f        0         r12=~(D^r12)  Y=~(D^r12)                 WorkAddr<=RES                                                                                           
5dd: swap           0         Y=0|r10                                  RES<=F                                                                      WorkAddr_LD_LO              jump 5ea
5de: swap           1         r9=0+r9  Y=0+r9                          RIdx<=F                                                                                                 jump 5a8
5df: swap           0         r4=0|r8  Y=0|r8                                                                                                                                  jump 26
5e0: mar_lo         0         r13=D|0  Y=r13                           RES<=F                                           WorkAddr_LD_HI                                         jump 5f1
5e1: swap           1         r0=(0|r0)>>1  Y=0|r0 RAM7=AFL.C                                                                                                                  
5e2: swap           0         Y=~(0^r0)                                                                                                AFL.EN                                  
5e3: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=CCR.F,L=CCR.L}                                                                  
5e4: const:d1       0         Y=~(D^0)                                 RIdx<=F                                                                                                 jump 2e
5e5: swap           0         r0=0&r0  Y=0&r0                                                                                                                                  jump 5e1
5e6: swap           0         Y=r0+Q                                                                                                                                           jump 1bc
5e7: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 4f3
5e8: mar_lo         0         r11=D|0  Y=r11                           RES<=F                                                                      WorkAddr_LD_LO              jump 5dc
5e9: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (5e5, 5e5, 5e7, 5e7)
5ea: swap           0         Y=0|r11                                  RES<=F                                           WorkAddr_LD_HI             Addr_U/D<=1                 ret
5eb: swap           0         r0=0&r0  Y=0&r0                                                                                                                                  switch flags(ZM) jump (5e1, 5e1, 5e3, 5e3)
5ec: swap           0         Y=r0+Q                                                                                    WorkAddr_Cnt                                           if MemFault jsr 76e
5ed: bus_read       1         Y=D-r0                                                                                                   AFL.EN                                  switch flags(ZM) jump (5e9, 5e9, 5eb, 5eb)
5ee: CCR            0         Q=~(D^0) Y=~(D^0)                                                                                                                                jump 39e
5ef: swap           0         Y=r0+Q                                                                                                                                           jump 1c4
5f0: swap           1         Y=r4-r8                                                                                                  AFL.EN                                  jump 675
5f1: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                               /AddrCount_EN<=1            jump 5e8
5f2: swap           0         r4=r4+r4  Y=r4+r4                                                                                                                                jump 46d
5f3: swap           0         Y=0|r4                                   AR<=F                                                                                                   jump 564
5f4: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
5f5: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 542
5f6: const:e        0         r0=D|0  Y=D|0                                                                                                                                    jump 7f1
5f7: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
5f8: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
5f9: bus_read       0         r4=D|0  Y=D|0                                                                                                                                    if MemFault jsr 466
5fa: const:f0       0         r0=~(D^0)  Y=~(D^0)                                                                                                                              
5fb: swap           0         Y=0&r0                                                                                                   AFL.EN                                  jsr 44e
5fc: swap           0         Q=0|r4 Y=0|r4                                                                                                                                    switch flags(ZM) jump (5f2, 5f3, 5f2, 5f3)
5fd: swap           1         r9=0+r9  Y=0+r9                          RIdx<=F                                                                                                 switch flags(ZM) jump (5fe, 5ff, 5fe, 5ff)
5fe: swap           0         Q=0|r8 Y=0|r8                                                                                                                                    jump 90
5ff: swap           0         Y=0|r4                                   CCR<={V=CCR.V,M=CCR.M,F=0,L=0}                                  AFL.EN                                  jump 20
600: swap           0         Y=r0+Q                                                                                                                                           switch dma??? jump (600, 604, 608, 60c)
601: swap           0         Y=r0+Q                                                                                                               /AddrCount_EN<=0            switch dma??? jump (600, 604, 608, 60c)
602: mar_lo         0         Y=D|0                                    RES<=F                                                                                                  jump 1d1
603: R[RIdx]        0         Y=D|0                                                                                                                DataWTClock                 jump 6a8
604: swap           0         Y=r0+Q                                                                                                                                           switch dma??? jump (605, 605, 60d, 60d)
605: swap           0         Y=r0+Q                                                                                                                                           switch dma??? jump (605, 605, 60d, 60d)
606: const:f8       0         r4=((~D)&r4)<<1 Q<<=1 Y=(~D)&r4 Q0=0                                                                                                             
607: CCR            0         r5=~(D^0)  Y=~(D^0)                                                                                                                              jump 6d7
608: swap           0         Y=r0+Q                                                                                                                                           jump 6b4
609: swap           0         r9=0&r0  Y=0&r0                          RIdx<=F                                                         AFL.EN                                  if REG_MMIO jsr 633
60a: swap           1         r8=0+r9  Y=r9                            RES<=F                                           MemAddr_Cnt    BusCycleEnd                             jsr 103
60b: swap           0         Y=r0+Q                                                                                                                                           jump 100
60c: swap           0         Y=r0+Q                                                                                                                                           jump 60d
60d: swap           0         Y=r0+Q                                                                                                                                           if Cycle jsr 6b8
60e: swap           0         Y=r0+Q                                                                                                                                           jump 60d
60f: R[RIdx.L][CPL] 0         Y=D|0                                    RES<=F                                                                                                  jump 625
610: dips?          0         Y=D|0                                    RIdx<=F                                                                     /AddrCount_EN<=1            jump 7a0; pop
611: swap           0         Y=0|r11                                  RES<=F                                                                      DMAAddrCtl<=0               jsr 1ac
612: mar_lo         0         r15=D|0  Y=D|0                                                                                                                                   jsr 5bd
613: swap           0         Y=r0+Q                                                                                                                                           jsr 1ac
614: swap           0         r14=(0|r6)>>1  Y=0|r6 RAM7=ALU.S                                                                                                                 jsr 59
615: mar_lo         0         r15=D|0  Y=r14                           PTIdx<=F                                                                                                jump 79
616: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                               Addr_U/D<=1                 jump 100
617: swap           0         Y=0|r5                                   RES<=F                                                                      DataWTClock                 jsr 6bb
618: swap           0         Y=0|r3                                   RES<=F                                           MemAddr_Cnt                DataWTClock                 jsr 6bb
619: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt                                            if DMARequest jsr 785
61a: swap           0         Y=0|r1                                   RES<=F                                                                      DataWTClock                 jsr 6bb
61b: swap           0         Y=0|r2                                   RES<=F                                           MemAddr_Cnt                DataWTClock                 jsr 6bb
61c: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt                                            if DMARequest jsr 785
61d: swap           0         Y=0|r0                                   RES<=F                                                                      DataWTClock                 jsr 6bb
61e: mar_lo         0         r1=D|0  Y=r9                             RIdx<=F                                                                                                 
61f: mar_hi         0         r2=D|0  Y=r1                             RES<=F                                                                                                  
620: const:f        0         Y=~(D^r2)                                RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     
621: const:fe       0         Y=~(D^0)                                 RES<=F                                                                      R[RIdx.L][CPL]<=RES         
622: const:ff       0         Y=~(D^0)                                 RES<=F                                           WorkAddr_LD_HI                                         
623: const:f        0         r6=D&r6  Y=D&r6                                                                                                                                  
624: swap           0         Y=0&r0                                   PTIdx<=F                                                                    WorkAddr_LD_LO              jump 616
625: R[RIdx]        0         Y=D|0                                    RES<=F                                                                      WorkAddr_LD_LO              jump 68d
626: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                               Addr_U/D<=1                 jump 658
627: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jsr 770
628: swap           0         r9=D|0  Y=D|0                            RIdx<=F                                                                                                 if DMARequest jsr 785
629: swap           0         r5=0|Q  Y=0|Q                                                                                            AFL.EN                                  if RegIdx & 1 jsr 722
62a: swap           1         r9=D+0  Y=D+0                                                                                                                                    jsr 770
62b: swap           0         Y=0|Q                                    WorkAddr<=RES                                                   AFL.EN                                  jump 721
62c: const:ef       0         Y=r9-D                                   RIdx<=F                                                                                                 
62d: swap           1         r9=0+r9  Y=r9                            RIdx<=F                                                                                                 jump 560
62e: swap           0         Y=r0+Q                                                                                                                                           jsr 68e
62f: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                                                           jump 65f
630: swap           0         Y=0|r5                                   RES<=F                                                                                                  if DMARequest jsr 785
631: swap           0         Y=0|r5                                   PTIdx<=F                                                                                                
632: swap           0         r5 =(r5+r5)<<1  Y=r5+r5 Q0=0                                                                                                                     jump 634
633: mar_lo         0         Y=D|0                                    RIdx<=F                                                                                                 switch pagetable??? jump (635, 635, 637, 637)
634: swap           0         r5 =(r5+r5)<<1  Y=r5+r5 Q0=0             CCR<={V=CCR.V,M=CCR.M,F=RES.D5,L=/CCR.L}                                                                jump 640
635: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              jump 712
636: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             jump 466
637: swap           0         Y=0|r9                                   RIdx<=F                                                         BUS_DELAY                               jump 603
638: const:f9       0         Q=~(D^0) Y=~(D^0)                                                                                                                                
639: swap           0         Y=r0+Q                                                                                                                                           jump 7
63a: swap           0         Q=0&r0 Y=0&r0                                                                                                                                    jump 6b
63b: mar_lo         0         Y=D|0                                    RIdx<=F                                                                                                 switch pagetable??? jump (63d, 63d, 63f, 63f)
63c: swap           0         Y=r0+Q                                                                                    BeginWrite                                             jump 7a8
63d: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             jump 646
63e: swap           0         Y=r0+Q                                                                                                               ABT_LED<=0                  jump 101
63f: swap           0         Y=0|r9                                   RIdx<=F                                                         BUS_DELAY                               jump 603
640: const:f        0         r5=(~D)&r5  Y=(~D)&r5                                                                                                                            
641: const:f0       0         r6=(~D)&r6  Y=(~D)&r6                                                                                                                            
642: swap           0         r6=r5|r6  Y=r5|r6                                                                                                                                jump 638
643: mar_lo         0         Y=D|0                                    RIdx<=F                                                                                                 switch pagetable??? jump (645, 645, 647, 647)
644: R[RIdx]        0         Y=D|0                                    RES<=F                                                                      WorkAddr_LD_LO              jump 3ce
645: const:71       0         Y=~(D^0)                                 RIdx<=F                                                         BusCycleEnd                             jsr 68e
646: const:fc       0         Q=~(D^0) Y=~(D^0)                                                                                                                                jump 7
647: swap           0         Y=0|r9                                   RIdx<=F                                                         BUS_DELAY                               jump 603
648: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 101
649: ILR?           0         r4=(D+0)>>1  Y=D+0 RAM7=ALU.C                                                                                        R[RIdx]<=RES        LSB     switch flags(ZM) jump (64a, 64b, 64a, 64b)
64a: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 101
64b: swap           0         r3=(0|r2)<<1 Q<<=1 Y=0|r2 Q0=0           RIdx<=F                                                                                                 switch flags(IL) jump (648, 64c, 648, 64c)
64c: swap           0         r4=r3+r4  Y=r3+r4                                                                                                                                jump 76a
64d: const:6f       0         r0=~(D^0)  Y=~(D^0)                                                                       MemAddr_Cnt                                            
64e: const:7f       0         r7=~(D^0)  Y=~(D^0)                      WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              
64f: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                                                           jump 650
650: swap           0         r2=0|r3  Y=0|r3                                                                                                                                  if DMARequest jsr 785
651: swap           0         r4=0&r0  Y=0&r0                                                                                                                                  jump 512
652: const:ef       1         r7=D+r0  Y=D+r0                          WorkAddr<=RES                                                                                           jump 650
653: const:8        0         Y=D&r6                                   WorkAddr<=RES                                    Swap           AFL.EN                                  jump 6f4
654: swap           0         r1 =(r1+r1)<<1  Y=r1+r1 Q0=0                                                                                                                     jump 6e5
655: dips?          0         Y=D|0                                    CPL<=F                                                                                                  jump 6d5
656: bus_read       0         r1=D&r1  Y=D&r1                          RES<=F                                                                      DataWTClock                 jump 53e
657: swap           0         Y=0|r2                                   CPL<=F                                                                                                  jump 6d5
658: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt                                            jump 74e
659: swap           0         r5=0&r0  Y=0&r0                                                                                                                                  jump 56b
65a: swap           0         Y=r0|r1                                  RES<=F                                                                                                  if DMARequest jsr 785
65b: const:e3       0         r9=(~(D^0))>>1  Y=~(D^0) RAM7=ALU.S      RIdx<=F                                                                                                 
65c: swap           0         Y=0|r9                                   RIdx<=F                                                                     R[RIdx.L][CPL]<=RES LSB     jsr 48e
65d: ILR?           0         r0=D|0  Y=D|0                                                                                                                                    switch flags(ZM) jump (655, 655, 657, 657)
65e: swap           1         r0=0+r0  Y=0+r0                                                                                                                                  switch flags(ZM) jump (652, 653, 652, 653)
65f: swap           0         Y=0&r0                                   RES<=F                                                                                                  jump 105
660: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=CCR.F,L=0}                                                                      
661: const:7f       0         r9=r7-D  Y=r7-D                          WorkAddr<=RES                                                                                           
662: swap           0         r4=0|r7  Y=0|r7                                                                           BeginRead                                              jsr 10
663: const:f7       0         Y=(~D)&r6                                                                                                AFL.EN                                  
664: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (66d, 66d, 66f, 66f)
665: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=CCR.F,L=AFL.C}                                                                  jump 660|(STK0 & f); pop
666: bus_read       0         r1=D|r1  Y=D|r1                          RES<=F                                                                      DataWTClock                 jump 53e
667: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                               Addr_U/D<=0                 
668: const:fb       0         Q=~(D^0) Y=~(D^0)                                                                                                                                
669: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt                                            jump 7
66a: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             jump 1c5
66b: swap           0         Y=0|r9                                   RIdx<=F                                                                     R[RIdx]<=RES                jump 6fd
66c: mar_lo         0         Y=D|0                                    RIdx<=F                                                         BUS_DELAY                               switch pagetable??? jump (66a, 66b, 66a, 66b)
66d: const:7f       0         r9=~(D^0)  Y=~(D^0)                                                                                                                              
66e: swap           0         r4=0|r7  Y=0|r7                                                                                                                                  jsr 659
66f: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=0                 jump 6ce
670: swap           0         r4=0|r8  Y=0|r8                                                                                                                                  switch flags(ZM) jump (7c2, 7c3, 7c2, 7c3)
671: swap           0         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=0                                                                                                                   jump 6b1
672: swap           0         Y=r0+Q                                                                                                                                           jump 468
673: const:80       0         r9=D|0  Y=D|0                            RIdx<=F                                                                                                 
674: swap           0         Y=r0+Q                                                                                                                                           jump 5fe
675: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (672, 673, 672, 673)
676: bus_read       0         r1=D^r1  Y=D^r1                          RES<=F                                                                      DataWTClock                 jump 53e
677: swap           0         Y=r0+Q                                   CCR<={V=RES.D7,M=RES.D6,F=RES.D5,L=RES.D4}                                                              
678: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              if DMARequest jsr 785
679: swap           0         Y=r0+Q                                                                                                                                           jump 617
67a: unused
67b: swap           0         r4=0|r3  Y=0|r3                                                                           BeginRead                                              jsr 10
67c: swap           0         r4=0|r3  Y=0|r3                                                                                                                                  jsr 569
67d: swap           0         r4=0|r3  Y=0|r3                                                                                                                                  switch flags(ZM) jump (67e, 67f, 67e, 67f)
67e: swap           0         Y=r0+Q                                                                                                                                           jump 516
67f: swap           0         r0=~(r0^r0)  Y=~(r0^r0)                                                                                                                          jump 515
680: bus_read       0         r0=D|0  Y=D|0                                                                             BeginRead                                              if MemFault jsr 1be
681: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
682: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              if DMARequest jsr 785
683: bus_read       0         r1=D|0  Y=D|0                                                                             BeginRead                                              if MemFault jsr 70e
684: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
685: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             jump 587
686: R[RIdx]        0         Y=D-0                                    RES<=F                                                          AFL.EN                                  jump 649
687: mar_lo         0         Y=D|0                                    RES<=F                                                                                                  jump 6f9
688: ILR?           0         r2=D|0  Y=D|0                                                                                                                                    switch flags(ZM) jump (689, 689, 68b, 68b)
689: swap           0         Y=r0+Q                                                                                                               RUN<=1                      jsr 68e
68a: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                               ABT_LED<=0                  jump 6f6
68b: swap           0         r0=D|0  Y=r1                             RIdx<=F                                                                                                 
68c: const:c6       0         r0=(~D)&r0  Y=(~D)&r0                    CPL<=F                                                                                                  jump 689
68d: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI                                         ret
68e: swap           0         Y=r0+Q                                                                                                                                   LSB     jump 60f
68f: const:df       0         r5=~(D^0)  Y=~(D^0)                                                                                                                              
690: const:80       0         r0=~(D^0)  Y=~(D^0)                                                                                                                              
691: swap           0         r8=r0&r8  Y=r0&r8                                                                         BeginRead                                              jsr 6ac
692: swap           0         r1=0|Q  Y=0|Q                            WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              switch flags(ZM) jump (695, 695, 697, 697)
693: const:bf       0         Y=D^r7                                   RES<=F                                                                                                  
694: swap           0         Y=r0+Q                                   CCR<={V=RES.D7,M=RES.D6,F=RES.D5,L=CCR.L}                                                               jump 602
695: swap           0         r7=0&r0  Y=0&r0                                                                           BeginRead                                              jsr 6ac
696: swap           0         r2=0|Q  Y=0|Q                            WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              switch flags(ZM) jump (699, 699, 69b, 69b)
697: swap           0         Y=r0+Q                                                                                    BeginRead                                              jsr 6ac
698: swap           0         Y=r5^Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI AFL.EN      WorkAddr_LD_LO              switch flags(ZM) jump (6c1, 6c1, 6c3, 6c3)
699: swap           1         Y=r2-r1                                                                                                  AFL.EN                                  
69a: swap           0         r3=r3-0  Y=r3-0                                                                                          AFL.EN                                  switch flags(ZM) jump (69c, 69d, 69e, 69f)
69b: swap           0         Y=r1^r5                                                                                                  AFL.EN                                  jump 6a1
69c: swap           0         Y=0&r0                                   RES<=F                                                                                                  jump 694
69d: swap           0         r7=~(0^r7)  Y=~(0^r7)                                                                                                                            jump 693
69e: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (691, 691, 693, 693)
69f: swap           0         Y=0&r0                                   RIdx<=F                                                                                                 
6a0: swap           0         Y=r0+Q                                                                                                                                   LSB     jump 6a2
6a1: swap           0         r3=r3-0  Y=r3-0                                                                                          AFL.EN                                  switch flags(ZM) jump (6a5, 6a5, 6a7, 6a7)
6a2: R[RIdx.L][CPL] 0         Y=D|0                                    RES<=F                                                                                                  jump 6a4
6a3: swap           0         Y=~(0^r0)                                RES<=F                                                                                                  jump 694
6a4: R[RIdx]        0         Y=D|0                                    RES<=F                                                                      WorkAddr_LD_LO              jump 6a6
6a5: swap           0         Y=r0+Q                                                                                                                                           jump 69d
6a6: swap           0         r4=0|r8  Y=0|r8                                                                           WorkAddr_LD_HI                                         jump 6be
6a7: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (6a9, 6a9, 6ab, 6ab)
6a8: swap           0         Y=r0+Q                                                                                                                                   LSB     ret
6a9: swap           0         Y=r0+Q                                                                                    BeginRead                                              jsr 6ac
6aa: swap           0         Y=r5^Q                                                                                                   AFL.EN                                  switch flags(ZM) jump (6a1, 6a1, 6a3, 6a3)
6ab: swap           0         Y=r0+Q                                                                                                                                           jump 693
6ac: swap           0         Q=r5+r5 Y=r5+r5                                                                                                                                  if REG_MMIO jsr 643
6ad: swap           1         r4=r5+Q  Y=r5+Q                                                                           MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
6ae: bus_read       0         Q=D&r0 Y=D&r0                                                                                                                                    if MemFault jsr 74e
6af: const:7a       1         Y=D-Q                                                                                                    AFL.EN                                  
6b0: swap           1         Y=Q-r4                                                                                                   AFL.EN                                  switch flags(ZM) jump (6b2, 6b3, 6b2, 6b3)
6b1: swap           0         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=0                                                                                                                   jump 6c2
6b2: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (6b6, 6b7, 6b6, 6b7)
6b3: swap           0         Y=r8^Q                                                                                                   AFL.EN                                  ret
6b4: swap           0         Y=r0+Q                                                                                                                                           if Cycle jsr 610
6b5: swap           0         Y=r0+Q                                                                                                                                           jump 6b4
6b6: swap           1         Q=Q-r5 Y=Q-r5                                                                                                                                    
6b7: swap           0         Y=r8^Q                                                                                                   AFL.EN                                  ret
6b8: const:ec       0         Y=~(D^0)                                 RIdx<=F                                                                     /AddrCount_EN<=1            
6b9: swap           0         Y=~(r8^r8)                               RES<=F                                                                      DMAAddrCtl<=0               
6ba: dips?          0         Y=D|0                                    RIdx<=F                                                                     R[RIdx]<=RES                jump 7a0
6bb: swap           0         Y=r0+Q                                                                                    BeginWrite                                             jump 6cc
6bc: swap           0         r14=(0|r6)>>1  Y=0|r6 RAM7=ALU.S                                                                                                                 jsr 59
6bd: swap           0         r1=~(0^r15)  Y=~(0^r15)                                                                                                                          jump 6ca
6be: const:7f       0         r9=r8-D  Y=r8-D                          RIdx<=F                                                                                                 
6bf: swap           0         Q=0&r0 Y=0&r0                            WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jsr 58e
6c0: swap           1         Y=0-Q                                                                                                    AFL.EN                                  jsr 665
6c1: swap           0         r3=r3-0  Y=r3-0                                                                                          AFL.EN                                  switch flags(ZM) jump (6c5, 6c5, 6c7, 6c7)
6c2: swap           0         r4=(0|r4)<<1 Q<<=1 Y=0|r4 Q0=0                                                                                                                   jump 606
6c3: swap           0         Y=~(0^r0)                                RES<=F                                                                                                  jump 694
6c4: R[RIdx.L][CPL] 0         r7=D-0  Y=D-0                            RES<=F                                                          AFL.EN                                  jump 6c6
6c5: swap           0         Y=0&r0                                   RES<=F                                                                                                  jump 694
6c6: R[RIdx]        AFL.C     r8=D-0  Y=D-0                            RES<=F                                                                      WorkAddr_LD_LO              jump 6c8
6c7: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              switch flags(ZM) jump (6c9, 6c9, 6cb, 6cb)
6c8: swap           0         Y=r0^r0                                  RES<=F                                           WorkAddr_LD_HI                                         jump 677
6c9: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 697
6ca: swap           0         r1=r14&r1  Y=r14&r1                                                                                                                              jump 65a
6cb: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 693
6cc: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=0                 if RegOrPageOut jsr 9c
6cd: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             ret
6ce: const:7f       0         r9=~(D^0)  Y=~(D^0)                                                                       MemAddr_Cnt                                            
6cf: swap           0         r4=0|r7  Y=0|r7                                                                                                                                  jsr 63a
6d0: swap           0         Y=0|r1                                                                                                   AFL.EN                                  switch flags(ZM) jump (6d1, 6d1, 6d3, 6d3)
6d1: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (6d2, 6d3, 6d2, 6d3)
6d2: const:7f       0         Y=D|0                                                                                                    AFL.EN                                  
6d3: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=CCR.F,L=CCR.L}                                                                  
6d4: swap           0         Y=r0+Q                                                                                                                                           jump 5e4
6d5: swap           0         Y=r0+Q                                                                                                               INT_ACK<=0                  jsr 68e
6d6: swap           0         r9=r9+r9  Y=r9+r9                        RIdx<=F                                                                     RUN<=1                      jump 6dc
6d7: const:f        0         r5=(~D)&r5  Y=(~D)&r5                                                                                                                            
6d8: swap           0         r5=r4|r5  Y=r4|r5                                                                                                                                if DMARequest jsr 785
6d9: const:f5       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 
6da: swap           0         Y=r0+Q                                                                                                                                   LSB     jump 6c4
6db: unused
6dc: swap           0         Y=0|r0                                   RES<=F                                                                                                  if DMARequest jsr 785
6dd: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                               R[RIdx.L][CPL]<=RES         jump 6ed
6de: swap           0         r9=D|0  Y=D|0                                                                                                                                    if DMARequest jsr 785
6df: swap           0         r4=0|r3  Y=0|r3                                                                                                                                  jsr 63a
6e0: swap           0         Y=0|r1                                                                                                   AFL.EN                                  switch flags(ZM) jump (6e1, 6e1, 6e3, 6e3)
6e1: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (6e6, 6e7, 6e6, 6e7)
6e2: R[RIdx.L][CPL] 0         r2=D|0  Y=r2                             RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     jump 47
6e3: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z,M=AFL.S,F=0,L=CCR.L}                                                                      
6e4: swap           0         Y=r0+Q                                                                                                                                           jump 6eb
6e5: swap           0         r1=r0&r1  Y=r0&r1                                                                                                                                jump 6e9
6e6: swap           0         Y=~(D^0)                                                                                                 AFL.EN                                  
6e7: swap           0         Y=~(r1^r5)                               CCR<={V=AFL.Z,M=AFL.S,F=0,L=CCR.L}                              AFL.EN                                  
6e8: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (6ea, 6eb, 6ea, 6eb)
6e9: swap           0         r6=r1|r6  Y=r1|r6                                                                                                                                jump 100
6ea: swap           0         Y=r0+Q                                                                                                                                           jump 1e5
6eb: const:6e       1         r4=D+r0  Y=D+r0                                                                                                                                  
6ec: swap           1         r9=0+r9  Y=r9                            RIdx<=F                                                                                                 jump 585
6ed: const:f        0         r0=~(D^0)  Y=~(D^0)                                                                                                                      LSB     
6ee: R[RIdx]        0         r1=D|0  Y=D|0                            RES<=F                                                                                                  if DMARequest jsr 785
6ef: swap           0         r6=(~r0)&r6  Y=(~r0)&r6                  CCR<={V=RES.D7,M=RES.D6,F=RES.D5,L=RES.D4}                                                              
6f0: swap           0         Y=0|r1                                   PTIdx<=F                                                                                                jump 73f
6f1: swap           0         r9=D|0  Y=D|0                                                                                                                                    jsr 659
6f2: swap           0         r5=~(r5^r5)  Y=~(r5^r5)                                                                                                                          jump 6de
6f3: swap           0         r5=0&r5  Y=0&r5                                                                                                                                  jump 6de
6f4: swap           0         r4=(~D)&r7  Y=(~D)&r7                                                                                    AFL.EN                                  switch flags(ZM) jump (6f1, 6f1, 6f3, 6f3)
6f5: swap           0         Y=r0+Q                                                                                                                                           jump 73a
6f6: swap           0         Y=0|r2                                   CPL<=F                                           BeginRead                                              jump 609
6f7: CCR            0         r4=~(r4^r4)  Y=~(r4^r4)                                                                   Swap                                                   jsr 1e1
6f8: swap           0         Y=r2&r0                                                                                                  AFL.EN                                  jump 688
6f9: mar_hi         0         r2=D^r2  Y=D^r2                                                                                                                          LSB     jump 70a
6fa: unused
6fb: swap           0         r3=~(r3^r3)  Y=~(r3^r3)                                                                                                                          switch flags(ZM) jump (6f5, 6f5, 6f7, 6f7)
6fc: mar_lo         0         Y=D|0                                    RIdx<=F                                                         BUS_DELAY                               switch pagetable??? jump (6fe, 6ff, 6fe, 6ff)
6fd: swap           0         Y=r0+Q                                                                                                                                           jump 6a8
6fe: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              jump 5c3
6ff: swap           0         Y=0|r9                                   RIdx<=F                                                                     R[RIdx]<=RES                jump 6fd
700: swap           0         Y=r7+Q                                   RES<=F                                                          AFL.EN                                  if DMARequest jsr 785
701: swap           1         r7=0+Q  Y=0+Q                                                                                                        WorkAddr_LD_LO              jump 768
702: bus_read       0         r1=D+r1  Y=D+r1                                                                           BeginRead                                              jump 7db; pop
703: swap           1         r1=0+r1  Y=r7                            RES<=F                                           BeginWrite     AFL.EN                                  jsr 6a8
704: swap           AFL.C     r2=0+r2  Y=0+r2                                                                                          BusCycleEnd                             jump 778
705: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
706: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
707: swap           0         Y=r0+Q                                                                                    BeginRead                                              if MemFault jsr 636
708: bus_read       0         Y=D|0                                    RIdx<=F                                          Swap                                                   jump 71c
709: R[RIdx]        0         r3=D|0  Y=D|0                                                                                                                                    jump 70f
70a: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                                                                                                                                    jump 6e2
70b: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (70d, 70d, 70f, 70f)
70c: swap           0         Y=r0+Q                                                                                    BeginWrite                                             jump 7e9
70d: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 7f6
70e: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             jump 626
70f: swap           0         r0=~(0^r0)  Y=~(0^r0)                                                                                    AFL.EN                                  jsr 48c
710: swap           0         Q=0|r4 Y=0|r4                                                                                                                                    switch flags(ZM) jump (7cd, 7cd, 7cf, 7cf)
711: unused
712: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                                                           jump 646
713: swap           0         Y=r0+Q                                   CCR<={V=AFL.Z&AFL.LZ,M=AFL.S,F=CCR.F,L=CCR.L}    BeginRead                                              jump STK0
714: const:f        0         r15=~(D^0)  Y=~(D^0)                                                                                     AFL.EN      INT_ACK<=1                  
715: CCR            0         r0=(~D)&r15  Y=(~D)&r15                                                                                                                          jump 6bc
716: swap           0         Y=r0+Q                                                                                                                                           jump 719
717: const:7f       0         r9=~(D^0)  Y=~(D^0)                                                                                                                              
718: swap           0         r4=0|r8  Y=0|r8                                                                                          AFL.EN                                  jsr 659
719: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                                                           jump 69f
71a: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (716, 717, 716, 717)
71b: R[RIdx.L][CPL] 0         Y=D+r1                                   RES<=F                                           BeginRead      AFL.EN                                  jump 201
71c: swap           0         r9=D&r0  Y=D&r0                          RIdx<=F                                                                                                 if REG_MMIO jsr 633
71d: swap           0         r1=D|0  Y=D|0                                                                             Swap                                           LSB     jump 7d0
71e: swap           0         Y=r0+Q                                                                                                               RUN<=0                      jsr 48e
71f: const:f7       0         r0=~(D^0)  Y=~(D^0)                                                                                                                              
720: const:f5       0         r1=~(D^0)  Y=~(D^0)                                                                                                                              jump 72a
721: swap           0         Y=0|r5                                                                                                   AFL.EN                                  jump 713
722: swap           0         Y=0|Q                                    WorkAddr<=RES                                                   AFL.EN                                  jump 713; pop
723: R[RIdx]        0         r2=D|0  Y=D|0                                                                             MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
724: bus_read       0         Y=D|0                                                                                                    AFL.EN                                  if MemFault jsr 466
725: bus_read       0         r1=D+r1  Y=D+r1                          RES<=F                                                          AFL.EN                                  switch flags(ZM) jump (726, 727, 726, 727)
726: swap           AFL.C     r2=0+r2  Y=0+r2                          RES<=F                                                                      WorkAddr_LD_LO              jump 733
727: swap           AFL.C     r2=r2-0  Y=r2-0                          RES<=F                                                                      WorkAddr_LD_LO              jump 733
728: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=0,L=CCR.L}               MemAddr_Cnt                                            
729: mar_lo         0         Y=D|0                                    RES<=F                                                                      Addr_U/D<=1                 jump 1d1
72a: swap           0         Y=r0+Q                                                                                                                                           if DMARequest jsr 785
72b: ILR?           0         Y=D&r0                                                                                                   AFL.EN                                  jump 73d
72c: swap           0         Y=D|0                                    RIdx<=F                                                                                         LSB     switch flags(ZM) jump (72d, 72d, 72f, 72f)
72d: R[RIdx.L][CPL] 0         r2=D+r2  Y=D+r2                                                                                          AFL.EN                                  jump 781
72e: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt                                            jump 658
72f: swap           1         r0=0+r0  Y=0+r0                                                                                                                                  if RegIdx & 1 jsr 482
730: swap           0         Y=0&r0                                                                                                   AFL.EN                                  ret
731: R[RIdx]        0         Q=D|0 Y=D|0                                                                                                          DataWTClock                 jump 703
732: swap           0         Y=r0+Q                                                                                                                                           jump 731; pop
733: swap           0         r9=D|0  Y=D|0                                                                             WorkAddr_LD_HI                                         jump 627
734: swap           0         Y=r0+Q                                                                                                                                           jump 714
735: swap           0         Y=r0+Q                                                                                                                                           jump 791
736: swap           0         Y=r0+Q                                                                                                               R[RIdx]<=RES                jump 101
737: swap           0         r3=~(r3^r3)  Y=~(r3^r3)                                                                                                                          switch flags(ZM) jump (739, 739, 73b, 73b)
738: R[RIdx]        0         Y=D|0                                    RES<=F                                           WorkAddr_LD_HI                                         jump 25d
739: swap           0         r4=~(r4^r4)  Y=~(r4^r4)                                                                                                                          jsr 1e1
73a: dips?          0         Y=D&r1                                                                                                   AFL.EN                                  jump 6fb
73b: swap           0         Y=r0+Q                                                                                                                                           jump 71f
73c: dips?          0         r2=D&r1  Y=D&r1                                                                                          AFL.EN                                  switch flags(ZM) jump (735, 735, 737, 737)
73d: swap           0         Y=r0+Q                                                                                                                                           switch interrupts??? jump (734, 734, 73c, 73c)
73e: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=1                 jump 658
73f: swap           0         r1 =(r1+r1)<<1  Y=r1+r1 Q0=0                                                                                                                     jump 654
740: unused
741: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (745, 745, 747, 747)
742: swap           0         Y=r7-0                                                                                                   AFL.EN                                  switch flags(ZM) jump (741, 741, 743, 743)
743: swap           0         Y=r0+Q                                                                                                                                           jump 7b5
744: swap           0         Y=0|r9                                   RIdx<=F                                                                     R[RIdx]<=RES        LSB     jump 611
745: swap           0         r7=r7-0  Y=r7-0                                                                                                                                  jump 7b8
746: R[RIdx]        0         Y=D-0                                    RES<=F                                                                                                  jump 744
747: swap           0         Y=r0+Q                                                                                                                                           jump 5d4
748: swap           0         Y=r0+Q                                                                                                               /RTC_INT_Reset<=1   LSB     jump 746
749: R[RIdx]        0         r3=D|0  Y=D|0                                                                                                                                    jump 7d9
74a: const:57       0         Y=~(D^0)                                 RIdx<=F                                                                     /RTC_INT_Reset<=0           jump 748; pop
74b: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 81
74c: swap           0         r5=0|r1  Y=0|r1                                                                                                                                  if DMARequest jsr 785
74d: swap           0         r7=0|r2  Y=0|r2                                                                                                                                  jump 51a
74e: const:71       0         Y=~(D^0)                                 RIdx<=F                                                                                                 jsr 68e
74f: swap           0         Y=r0+Q                                                                                                                                           jump 1d6
750: swap           AFL.C     Y=0+r5                                   RES<=F                                                                      WorkAddr_LD_LO              jump 760
751: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (755, 755, 757, 757)
752: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 756
753: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=0,L=CCR.L}                                                                      
754: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (759, 759, 75b, 75b)
755: swap           0         r0=0&r0  Y=0&r0                                                                                                                                  jump 41a
756: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 761
757: swap           0         Y=r0+Q                                                                                                                                           jump 5d4
758: unused
759: swap           0         Y=0|r5                                                                                                   AFL.EN                                  jump 7b4
75a: unused
75b: swap           0         Y=r0+Q                                                                                                                                           jump 5d4
75c: swap           0         Y=r0+Q                                                                                    BeginRead                                              jsr 7eb
75d: swap           0         r7=r7-0  Y=r7-0                                                                                          AFL.EN      Addr_U/D<=1                 switch flags(ZM) jump (751, 751, 753, 753)
75e: swap           0         Y=r0+Q                                                                                                   BUS_DELAY                               
75f: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             jump 74e
760: swap           0         Y=r0+Q                                                                                    WorkAddr_LD_HI                                         jump 752
761: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
762: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             if DMARequest jsr 785
763: bus_read       0         r2=D&r4  Y=D&r4                                                                                          AFL.EN                                  if MemFault jsr 73e
764: swap           0         Y=0|r3                                                                                                   AFL.EN                                  push 765; switch flags(ZM) jump (765, 765, 767, 767)
765: swap           0         Y=0|r2                                   RES<=F                                                                                                  jump 7c4
766: R[RIdx]        0         Q=D-0 Y=D-0                                                                                                                                      jump 700
767: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (769, 769, 76b, 76b)
768: swap           AFL.C     Y=0+r5                                   RES<=F                                                                                                  jump 47a
769: swap           0         r3=r3-0  Y=r3-0                                                                           WorkAddr_Cnt                                           jump 3b; pop
76a: swap           0         Y=r4+r2                                                                                                  AFL.EN                                  jump 79f
76b: swap           0         Y=r0+Q                                   CCR<={V=CCR.V,M=CCR.M,F=1,L=CCR.L}                                                                      ret
76c: swap           0         Y=0|Q                                                                                                    AFL.EN                                  if RegOrPageOut jsr 5cc
76d: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              switch flags(ZM) jump (9, 9, b, b)|(STK0 & ff0)
76e: swap           0         Y=r0+Q                                   WorkAddr<=RES                                                                                           jump 74e
76f: swap           0         Y=0|r1                                   RES<=F                                           BeginRead      AFL.EN                                  jump 251
770:                0         r7=D|0  Y=D|0                                                                                                                                    push 771; switch pagetable??? jump (776, 777, 776, 777)
771: const:8        0         Y=D&r2                                                                                                   AFL.EN                                  
772: swap           0         Y=0|r3                                   RIdx<=F                                                                                                 push 773; switch flags(ZM) jump (779, 779, 77b, 77b)
773: swap           0         Y=0|r9                                   RIdx<=F                                                                     PTRAM<=RES                  if RegIdx & 1 jsr 732
774: swap           1         r1=0+r1  Y=r7                            RES<=F                                           BeginRead      AFL.EN                                  jsr 6a8
775: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             jump 796
776: const:80       0         r7=D|r7  Y=D|r7                                                                                                                                  ret
777: const:7f       0         r7=D&r7  Y=D&r7                                                                                                                                  ret
778: swap           0         Y=r0+Q                                                                                                               PTRAM<=RES                  jump 788
779: const:80       0         Y=~(D^0)                                 RES<=F                                                                                                  ret
77a: swap           0         r4=r4+r4  Y=r4+r4                                                                                                                                jump 74c
77b: const:81       0         Y=~(D^0)                                 RES<=F                                                                                                  ret
77c: R[RIdx]        0         r9=D|0  Y=D|0                                                                                                                                    if RegIdx & 1 jsr 482
77d: swap           0         Y=r0+Q                                                                                                                                           jump 44
77e: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             jump 78e
77f: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=0                 switch dma??? jump (785, 785, 78d, 78d)
780: swap           0         Y=0&r0                                                                                                   AFL.EN      WorkAddr_LD_LO              jump 715
781: R[RIdx]        AFL.C     r1=D+r1  Y=D+r1                                                                                                                                  jump 72f
782: const:f        0         r15=~(D^0)  Y=~(D^0)                                                                                                                             jump 780
783: bus_read       0         Q=D|0 Y=D|0                              RES<=F                                                                                                  if MemFault jsr 7a6
784: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt                R[RIdx.L][CPL]<=RES         ret
785: mar_lo         0         r15=D|0  Y=r6                            PTIdx<=F                                                                                                jsr 5bd
786: swap           0         Y=r0+Q                                                                                                               DMAAddrCtl<=1               jump 601
787: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=1                 jump 714; pop
788: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt                                            ret
789: R[RIdx]        0         r8=D|0  Y=D|0                                                                                                                                    jump 70a|(AR & f0)
78a: swap           0         r3=0|r8  Y=0|r8                                                                                                                                  jump 7d9
78b: swap           0         Y=r0+Q                                                                                                                                           jump 70c|(AR & f0)
78c: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 81
78d: ILR?           0         r0=D|0  Y=D|0                                                                             MemAddr_Cnt                                            switch interrupts??? jump (787, 787, 78f, 78f)
78e: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI             WorkAddr_LD_LO              jump 6
78f: const:f7       0         Y=(~D)&r0                                                                                                AFL.EN      Addr_U/D<=1                 
790: dips?          0         r0=D|0  Y=D|0                                                                                                                                    switch flags(ZM) jump (791, 791, 793, 793)
791: const:2b       0         r2=D|0  Y=D|0                                                                                                                                    jump 7d4; pop
792: R[RIdx]        0         r0=D|0  Y=D|0                                                                                                                                    jump 430
793: const:fb       0         Y=(~D)&r0                                                                                                AFL.EN                                  
794: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (795, 795, 797, 797)
795: const:e1       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 jump 71e; pop
796: swap           AFL.C     r2=0+r2  Y=0+r2                                                                                                      PTRAM<=RES                  jump 783
797: const:ef       0         r2=~(D^0)  Y=~(D^0)                                                                                                                              
798: const:57       0         Y=~(D^0)                                 RIdx<=F                                                                     /RTC_INT_Reset<=0           
799: swap           0         Q=0&r0 Y=0&r0                                                                                                        /RTC_INT_Reset<=1   LSB     jump 686
79a: swap           0         r3=0&r0  Y=0&r0                                                                                                                                  jump 7d9
79b: R[RIdx]        0         r0=D|0  Y=D|0                            RES<=F                                                                      DataWTClock                 jump 7d6
79c: swap           0         r3=0&r0  Y=0&r0                                                                           BeginRead                                              jump 7bd
79d: swap           0         Y=r0+Q                                                                                    WorkAddr_Cnt                                           jump 7e5
79e: unused
79f: R[RIdx]        0         Y=D|0                                                                                                    AFL.EN                                  switch flags(ZM) jump (7a2, 7a3, 7a2, 7a3)
7a0: swap           0         Y=r0+Q                                                                                                                                           if RegIdx & 1 jsr 74a
7a1: swap           0         Y=0|r9                                   RIdx<=F                                                                                                 jump 611
7a2: swap           0         r3=r3+r3  Y=r3+r3                                                                                                                                switch flags(ZM) jump (7a5, 7a5, 7a7, 7a7)
7a3: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 101
7a4: swap           0         Y=D&r0                                   RIdx<=F                                                         AFL.EN                                  jump 72c
7a5: swap           0         r2=(r3+r2)<<1 Q<<=1 Y=r3+r2 Q0=0                                                                                                                 jump 782
7a6: const:f8       0         Q=~(D^0) Y=~(D^0)                                                                                                                                jump 7
7a7: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 101
7a8: swap           0         r3=r3-0  Y=r3-0                                                                           WorkAddr_Cnt   AFL.EN                                  if RegOrPageOut jsr 5cc
7a9: swap           0         Y=r0+Q                                   WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              switch flags(ZM) jump (7ad, 7ad, 7af, 7af)
7aa: swap           0         Y=0&r0                                   RES<=F                                                                                                  jump 105
7ab: swap           0         Y=r0+Q                                                                                                                                           jump 79b
7ac: swap           0         Y=0&r0                                   RES<=F                                                                                                  jump 105
7ad: swap           0         Y=r0+Q                                                                                    BeginRead                                              jump 4e5
7ae: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             jump 1d6
7af: swap           0         Y=0|r2                                                                                                   AFL.EN                                  jump 539
7b0: swap           0         Q=0&r0 Y=0&r0                                                                                            BusCycleEnd                             switch flags(ZM) jump (7b1, 7b1, 7b3, 7b3)
7b1: swap           1         Y=0+Q                                    RES<=F                                                                                                  jump 105
7b2: const:f        0         Y=(~D)&r0                                                                                                AFL.EN                                  jump 7b0
7b3: const:e1       0         r9=~(D^0)  Y=~(D^0)                      RIdx<=F                                                                                                 jump 71e
7b4: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (7b5, 7b5, 7b7, 7b7)
7b5: swap           0         Y=0&r0                                   RIdx<=F                                                                                                 jsr 48e
7b6: const:54       0         Y=D-0                                    RIdx<=F                                                                                                 jump 7ab
7b7: const:4f       0         r0=~(D^0)  Y=~(D^0)                                                                                                                              
7b8: swap           0         r5=0|r0  Y=0|r0                                                                           BeginRead                                              jsr 7eb
7b9: swap           0         Y=~(0^r5)                                                                                                AFL.EN      Addr_U/D<=1                 jump 742
7ba: swap           0         Y=0&r0                                   RES<=F                                                                                                  jump 105
7bb: swap           0         Y=0|r5                                   RES<=F                                           WorkAddr_LD_HI                                         jump 7e4
7bc: swap           0         Y=0&r0                                   RES<=F                                                                                                  jump 105
7bd: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
7be: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
7bf: bus_read       0         r8=D|0  Y=D|0                                                                                                                                    jump 7d8
7c0: const:7f       0         r9=~(D^0)  Y=~(D^0)                                                                                                                              
7c1: swap           0         r5=~(r5^r5)  Y=~(r5^r5)                                                                                                                          jsr 62c
7c2: swap           0         Y=0|r0                                                                                                   AFL.EN                                  jump 71a
7c3: swap           0         r1=0&r0  Y=0&r0                                                                                                                                  jump 7c0
7c4: swap           0         Y=0&r0                                   RIdx<=F                                                                     R[RIdx.L][CPL]<=RES LSB     jump 7c6
7c5: swap           0         r7=r7-0  Y=r7-0                                                                           MemAddr_Cnt                                            jump 99
7c6: swap           0         Y=0|r3                                   RES<=F                                                                                                  jump 7c8
7c7: swap           0         r1=~(r1^r1)  Y=~(r1^r1)                                                                   MemAddr_Cnt    AFL.EN                                  ret
7c8: mar_lo         0         Y=D|0                                    RES<=F                                                                      R[RIdx.L][CPL]<=RES LSB     jump 1d1
7c9: swap           0         Y=0&r0                                   RES<=F                                                                                                  jump 105
7ca: swap           0         r7=r7-0  Y=r7-0                                                                                                                          LSB     jump 7cc
7cb: swap           0         Y=0&r0                                   RES<=F                                                                                                  jump 105
7cc: R[RIdx.L][CPL] 0         r3=D|0  Y=r7                             RIdx<=F                                                                                                 jump 7fc
7cd: swap           0         Y=r0+Q                                                                                                                                           jump 51b
7ce: R[RIdx.L][CPL] 0         r5=D|0  Y=r3                             RES<=F                                           WorkAddr_LD_HI BusCycleEnd                             jump 50b
7cf: swap           0         r4=r4+r4  Y=r4+r4                                                                                                                                jump 77a
7d0: R[RIdx.L][CPL] 0         r2=D|0  Y=D|0                                                                             MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
7d1: R[RIdx]        0         r1=D|0  Y=r1                             RIdx<=F                                                                                                 if MemFault jsr 466
7d2: bus_read       0         Y=D|0                                                                                                    AFL.EN                                  if RegIdx & 1 jsr 702
7d3: bus_read       0         r2=D+r2  Y=D+r2                                                                                          AFL.EN                                  switch flags(ZM) jump (7de, 7df, 7de, 7df)
7d4: swap           0         Y=r0+Q                                                                                                                                           jump 782
7d5: swap           0         Y=0|r0                                   RES<=F                                                                      DataWTClock                 jump 7d6; pop
7d6: swap           0         Y=r0+Q                                                                                    BeginWrite                 Addr_U/D<=0                 jsr 5d9
7d7: swap           0         Y=r0+Q                                                                                                                                           jump 5d5; pop
7d8: swap           0         Y=r0+Q                                                                                                                                           if MemFault jsr 466
7d9: swap           0         r0=~(0^r0)  Y=~(0^r0)                                                                                    AFL.EN                                  jsr 44e
7da: swap           0         Y=r0+Q                                                                                                                                           jump 710
7db: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
7dc: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
7dd: bus_read       0         r2=D+r2  Y=D+r2                                                                                          AFL.EN                                  if MemFault jsr 466
7de: swap           AFL.C     r1=0+r1  Y=0+r1                                                                                                                                  jump 7a4
7df: swap           AFL.C     r1=r1-0  Y=r1-0                                                                                                                                  jump 7a4
7e0: bus_read       0         r1=D|0  Y=D|0                                                                                                                                    if MemFault jsr 626
7e1: swap           0         Y=r0+Q                                                                                                                                           if DMARequest jsr 785
7e2: swap           0         Y=0|r1                                   RES<=F                                                                      DataWTClock                 jump 70c
7e3: const:d1       0         Y=~(D^0)                                 RIdx<=F                                                                                                 jump 2e
7e4: swap           0         r0=D|0  Y=D|0                                                                             BeginRead                  WorkAddr_LD_LO              
7e5: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
7e6: swap           0         Q=r0|r1 Y=r0|r1                          WorkAddr<=RES                                    WorkAddr_LD_HI BusCycleEnd WorkAddr_LD_LO              if DMARequest jsr 785
7e7: swap           0         r1=r1-0  Y=r1-0                                                                           WorkAddr_Cnt   AFL.EN                                  if MemFault jsr 76e
7e8: bus_read       0         Y=D|0                                    RES<=F                                                                      DataWTClock                 jump 2c
7e9: swap           0         r3=r3-0  Y=r3-0                                                                                          AFL.EN                                  if RegOrPageOut jsr 5cc
7ea: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             switch flags(ZM) jump (7e1, 7e1, 7e3, 7e3)
7eb: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 643
7ec: const:80       0         Q=~(D^0) Y=~(D^0)                                                                                                                                
7ed: swap           0         Y=r0+Q                                                                                                   BusCycleEnd                             if DMARequest jsr 785
7ee: bus_read       0         Q=D&Q Y=D&Q                                                                                                                                      if MemFault jsr 73e
7ef: const:bf       0         Y=~(D^Q)                                                                                                 AFL.EN                                  
7f0: swap           0         Y=r0+Q                                                                                                                                           switch flags(ZM) jump (7f9, 7f9, 7fb, 7fb)
7f1: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
7f2: swap           0         Y=r0+Q                                                                                    MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
7f3: bus_read       0         r9=D&r0  Y=D&r0                          RIdx<=F                                          BeginRead                                              if MemFault jsr 636
7f4: bus_read       0         r3=D|0  Y=D|0                                                                             Swap                                           LSB     if REG_MMIO jsr 633
7f5: R[RIdx.L][CPL] 0         r1=D|0  Y=D|0                                                                                                                                    jump 723
7f6: swap           0         Y=r0+Q                                                                                                                                           if REG_MMIO jsr 633
7f7: swap           0         Y=0|r4                                   AR<=F                                            MemAddr_Cnt    BusCycleEnd                             if DMARequest jsr 785
7f8: swap           0         Y=r0+Q                                                                                                                                           jump 107|(AR & f0)
7f9: const:dc       0         Y=~(D^Q)                                                                                                 AFL.EN                                  
7fa: swap           0         Y=r7-0                                                                                                   AFL.EN                                  switch flags(ZM) jump (7fd, 7fd, 7ff, 7ff)
7fb: swap           0         Y=0|r0                                   RES<=F                                                                      DataWTClock                 jump 4b
7fc: R[RIdx.L][CPL] 0         r2=D|0  Y=D|0                            RES<=F                                                                                          LSB     jump 7ce
7fd: swap           0         Y=r0+Q                                                                                                               Addr_U/D<=0                 switch flags(ZM) jump (7c5, 7c5, 7c7, 7c7)
7fe: swap           0         Y=0|r4                                   RES<=F                                                                                                  jump 7bb
7ff: swap           0         Y=0|r5                                                                                                   AFL.EN                                  jump 1ad

Mux select distribution
333: 906
  0: 710
  3: 223
313: 33
222: 92
330: 18
223: 7
311: 3
331: 15
312: 5
  2: 1
